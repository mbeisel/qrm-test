<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:opentosca="https://github.com/UST-QuAntiL/OpenTOSCA" id="Definitions_0wzkc0b" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20230126">
  <bpmn:process id="Process_070m5p1" isExecutable="true">
    <bpmn:endEvent id="EndEvent_0pjq7fr">
      <bpmn:incoming>SequenceFlow_134gyga</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:startEvent id="StartEvent_0ej6lwb">
      <bpmn:extensionElements>
        <camunda:formData>
          <camunda:formField id="adjMatrix" label="Array containing adj_matrix" type="string" defaultValue="[[0,3,3,6,9,1],[3,0,4,4,-8,4],[3,4,0,3,-7,1],[6,4,3,0,-7,6],[9,-8,-7,-7,0,-5],[1,4,1,6,-5,0]]" />
          <camunda:formField id="quantum_token_ibmq" label="IBMQ Token" type="string" />
          <camunda:formField id="hub" label="IBMQ Hub" type="string" defaultValue="ibm-q" />
          <camunda:formField id="group" label="IBMQ Group" type="string" defaultValue="open" />
          <camunda:formField id="project" label="IBMQ Project" type="string" defaultValue="main" />
          <camunda:formField id="ibmqUrl" label="IBMQ URL" type="string" defaultValue="https://auth.quantum-computing.ibm.com/api" />
          <camunda:formField id="qpu" label="IBMQ Backend name" type="string" defaultValue="simulator" />
          <camunda:formField id="noiseModel" label="Noise Model" type="string" />
          <camunda:formField id="onlyMeasurementErrors" label="Noise Model contains only measurement errors" type="boolean" />
          <camunda:formField id="gammas" label="gammas" type="string" defaultValue="[1]" />
          <camunda:formField id="betas" label="betas" type="string" defaultValue="[1]" />
          <camunda:formField id="HypervisorEndpoint" label="HypervisorEndpoint" type="string" defaultValue="https://idm02.bw-cloud.org:5000/v3" />
          <camunda:formField id="HypervisorApplicationID" label="HypervisorApplicationID" type="string" defaultValue="c4393a03db254ff3854ac764d551fe13" />
          <camunda:formField id="HypervisorApplicationSecret" label="HypervisorApplicationSecret" type="string" defaultValue="" />
          <camunda:formField id="VMPrivateKey" label="VMPrivateKey" type="string" defaultValue="-----BEGIN RSA PRIVATE KEY-----&#10;MIIEpAIBAAKCAQEAyMv/c4dhoE8nGRuHWxvOBha0hYVF4nri4dcIHodNPUxFtnGy&#10;IZvOQEbX349syErH5wl+eJVC6CXy7Jw/YGdXG2f0r7uQg74LWboF434iudhQK2R9&#10;R+k1HMq2vIe6fPBFBKpJhYjk0KDwRh+FLDkxpkB11NqoNEE4KdESPIEkKh0/C3j4&#10;08vdZZNPeGuGkF0KoRw83H912d1XVY/Wxo7CLbxxjYXoG2wveZimmHY89xp+ZPbg&#10;5PoWpALblWjuV+lzaNDn9oXgrhLfOk4/8NY66Xp34om3Gwa8ulQzgkrPWT0FsVH9&#10;acHu49TFjaX39Xj5LSNdjXWT5PqZv7E3zpFMWwIDAQABAoIBAEKOc8b8edykP+Zv&#10;nIcTiU+1WPLlAQwYBXosR3GvEWgfDwBxYUUImu3tTYK5zKn7N5WaLQSVHQ9L/OB2&#10;zf8LYfEgnRdeyYERjjuYkHkehy4oyDIJ5gjfAQ7hFn8ZUjQ1g/sO4r3TaVzJ67qi&#10;mgbVkmJz/Vqne5eOgqpBtZS+jZkzbzYjQ6YmwMw6S/qXup2p69RzxuFSOCp9IHck&#10;/4jT9/hk9tVTz0wIaFS0fk3jIxhxGv3E6UiIpN1kn2HmoIsN+0Z5IXuuTSHA13MA&#10;xUNNBeVCM4JYaGH2GjjpoAPlpTK/wfYPXyWRuAewC40GpXMxoXz4L+D7nmyeJaBl&#10;/N+fQBECgYEA/klQkrgp1jhkLTlLvhHeHI6UG68kPtaWd7UuQ9Z8h0+4WTLu7+TS&#10;5Fu93AFCrtds6EG0FErDORCoH4XVOdvUyHHUjrnhuE4shYzIxZyxbm7VIhKGLgKH&#10;X7C4mv4doY6n2EQMld6WHDyA4nroExfl/xQBJdLDUog9gsKheZZ/JlMCgYEAyiZn&#10;r3mQeyyI61e+9Q80xkhefXxlOedL4fHkCO2+YkVqhoOj49zllWUAUFrSrEkue5+g&#10;YZp8eStNGjDzhYOzA/s8OO/mynYaQny942aPV6FJcMUFBguETI/xoxTBdxZ6HH6L&#10;Ku92ADJmCF7/n6raBOXQnzWI3MzdHiu4ysA08NkCgYB+qfxlqTDF0X8s+75b5kCS&#10;Tv89rwdJ+dAnvutVxVBwgmhcnj9g5cWbFIvFPCeAOjS4mIngFcGa+k4UrbChynv6&#10;gKEVm0fxa5dHyvHzZXMIhFLMTxfhcUcHhlrecbhG0m2PD46JVL/HPuggaIKTiDL7&#10;1XYg5hR/Vvf024hdrXaWmwKBgQCK2xCTx0QIZ9HxHofL21Mb9G/7cGwz9v33yOkj&#10;fPMum5INrfTwuzZ0hTlO+OQHdglY35ASG0TvEmBW4lMUXh+kV3nJfnigj7l//CGP&#10;R06lGePRc3P88AJDeQi5RbOSsrzUP9QmfPAoOHY/v8mFCp3RiW7hPauyR4KHi+7W&#10;TmrPGQKBgQDdo7sjrGwiiTYpY2DFuuGcyTx0TyBthjJe2dTfC0s+LGv0tDy57yf7&#10;Jjq4bnTTL+ETbNxXUFPmTZ6iPp4Itgm8ETFTJnrPCJJFfKm5avHomOrf2WjVp/Os&#10;6jLS0kgKqmi8ZRTgYu396yniKyza4N+IrYKFpg0m5GJUraSknrDQDA==&#10;-----END RSA PRIVATE KEY-----" />
          <camunda:formField id="VMKeyPairName" label="VMKeyPairName" type="string" defaultValue="Orchestration" />
          <camunda:formField id="HypervisorRegion" label="HypervisorRegion" type="string" defaultValue="Mannheim" />
          <camunda:formField id="HypervisorNetworks" label="Hypervisor Network Ids" type="string" defaultValue="c4eafee4-e84d-45ca-92a6-238302b75083" />
        </camunda:formData>
      </bpmn:extensionElements>
      <bpmn:outgoing>Flow_1qkl8n3</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_134gyga" sourceRef="Task_1h88ddf" targetRef="EndEvent_0pjq7fr" />
    <bpmn:userTask id="Task_1h88ddf" name="Analyze Results">
      <bpmn:extensionElements>
        <camunda:formData>
          <camunda:formField id="plotUrl" label="Result Image URL" type="string">
            <camunda:properties>
              <camunda:property id="Property_39pgd42" />
            </camunda:properties>
            <camunda:validation>
              <camunda:constraint name="readonly" />
            </camunda:validation>
          </camunda:formField>
        </camunda:formData>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0czrsh0</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_134gyga</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="Gateway_0wq36cd" name="Converged?">
      <bpmn:incoming>Flow_0wlfysg</bpmn:incoming>
      <bpmn:outgoing>Flow_0czrsh0</bpmn:outgoing>
      <bpmn:outgoing>Flow_0tljgkh</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="Gateway_0qaj4kt">
      <bpmn:incoming>Flow_1qkl8n3</bpmn:incoming>
      <bpmn:incoming>Flow_0tljgkh</bpmn:incoming>
      <bpmn:outgoing>Flow_1m60wcg</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1m60wcg" sourceRef="Gateway_0qaj4kt" targetRef="Task_009hsrk" />
    <bpmn:sequenceFlow id="Flow_0czrsh0" name="Yes" sourceRef="Gateway_0wq36cd" targetRef="Task_1h88ddf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('converged')!= null &amp;&amp; execution.getVariable('converged') != 'false'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_18kx5os" sourceRef="Task_009hsrk" targetRef="Activity_1p2awjj" />
    <bpmn:sequenceFlow id="Flow_1qkl8n3" sourceRef="StartEvent_0ej6lwb" targetRef="Gateway_0qaj4kt" />
    <bpmn:sequenceFlow id="Flow_0tljgkh" sourceRef="Gateway_0wq36cd" targetRef="Gateway_0qaj4kt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('converged')== null || execution.getVariable('converged') == 'false'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0wlfysg" sourceRef="ParameterOptimizationTask_01m89mt" targetRef="Gateway_0wq36cd" />
    <bpmn:sequenceFlow id="Flow_05sf6lt" sourceRef="ResultEvaluationTask_0933y5e" targetRef="ParameterOptimizationTask_01m89mt" />
    <bpmn:sequenceFlow id="Flow_11f62wp" sourceRef="Activity_1p2awjj" targetRef="ResultEvaluationTask_0933y5e" />
    <bpmn:serviceTask id="ResultEvaluationTask_0933y5e" name="Evaluate Results" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaResultEvaluationService_w1/?csar">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/objective-evaluation/objective/max-cut</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">  import groovy.json.JsonBuilder
  def adjMatrix = execution.getVariable("adjMatrix");
  def mitigatedCounts = execution.getVariable("mitigatedCounts");
  def counts = execution.getVariable("counts")[0];
  def objFun = execution.getVariable("objectiveFunction");

  if (mitigatedCounts != null) {
    counts = mitigatedCounts
  }

  def request = [:];
  request.put("visualization", "True"  )
  request.put("adj_matrix", adjMatrix);
  request.put("counts", counts);
  request.put("objFun", objFun);

  def objFun_hyperparameters = [:]
  if (execution.getVariable("alpha") != null){
    objFun_hyperparameters.put("alpha", execution.getVariable("alpha"));
  }
  if (execution.getVariable("eta") != null){
    objFun_hyperparameters.put("eta", execution.getVariable("eta"));
  }
  request.put("objFun_hyperparameters", objFun_hyperparameters);

  execution.setVariable("plotUrl", "http://localhost:8090/engine-rest/process-instance/" + execution.getProcessInstanceId() + "/variables/maxCutPlot/data");

  requeststring = new JsonBuilder(request).toPrettyString()
  return requeststring;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="objValue">
              <camunda:script scriptFormat="Groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
objValue= resp.get('objective_value')
println("obj values:" + objValue.toString());
return objValue.toDouble();</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="evaluatedCosts">
              <camunda:script scriptFormat="Groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp)
costs= resp.get('costs')
println(costs);
return costs;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="maxCutPlot">
              <camunda:script scriptFormat="Groovy">import org.camunda.bpm.engine.variable.value.FileValue
								import org.camunda.bpm.engine.variable.Variables
                import groovy.json.JsonSlurper
                def slurper = new JsonSlurper().parseText(response)
								String filename = "plot.png";
								FileValue typedFileValue = Variables.fileValue(filename).file(slurper.visualization.decodeBase64()).mimeType("application/png").create()
typedFileValue</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="objectiveFunction">expectationValue</camunda:inputParameter>
          <camunda:inputParameter name="costFunction">maxcut</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_11f62wp</bpmn:incoming>
      <bpmn:outgoing>Flow_05sf6lt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:subProcess id="ParameterOptimizationTask_01m89mt" name="Optimize QAOA Parameters">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="optimizer">cobyla</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_05sf6lt</bpmn:incoming>
      <bpmn:outgoing>Flow_0wlfysg</bpmn:outgoing>
      <bpmn:startEvent id="Event_1peesj7">
        <bpmn:outgoing>Flow_12oknzl</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="Gateway_0abtadr" name="Is first Iteration?">
        <bpmn:incoming>Flow_12oknzl</bpmn:incoming>
        <bpmn:outgoing>Flow_08uq4fy</bpmn:outgoing>
        <bpmn:outgoing>Flow_16xwigh</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:exclusiveGateway id="Gateway_1echngq">
        <bpmn:incoming>Flow_08uq4fy</bpmn:incoming>
        <bpmn:incoming>Flow_18ws272</bpmn:incoming>
        <bpmn:outgoing>Flow_1n7keo8</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:endEvent id="Event_07mtfd5">
        <bpmn:incoming>Flow_1pj1qbm</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:serviceTask id="Activity_0709wqh" name="Initialize Optimizer" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaOptimizationService_w1/?csar">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="Content-Type">application/json</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/optimization/optimization-service</camunda:inputParameter>
              <camunda:inputParameter name="payload">
                <camunda:script scriptFormat="groovy">
			    import groovy.json.JsonBuilder
			    def pollingEndpoint = execution.getVariable("CAMUNDA_ENDPOINT")
                def optimizer = execution.getVariable("optimizer");
                def gammas = execution.getVariable("gammas");
                def betas = execution.getVariable("betas");
                def initialParameters = betas + gammas;
                execution.setVariable("iterations", 0);

                def topic = "123456"
                execution.setVariable("optimizationTopic", topic)

                def request = [:];
                request.put("endpoint", pollingEndpoint);
                request.put("topic", topic);
                request.put("optimizer", optimizer);
                request.put("initialParameters", initialParameters);
                requeststring = new JsonBuilder(request).toPrettyString();
                return requeststring;
                </camunda:script>
              </camunda:inputParameter>
              <camunda:outputParameter name="iterations">
                <camunda:script scriptFormat="groovy">
                def iterations = connector.getVariable("iterations");
                iterations = iterations + 1;
                return iterations;
                </camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="converged">
                <camunda:script scriptFormat="groovy">return "false";</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_16xwigh</bpmn:incoming>
        <bpmn:outgoing>Flow_18ws272</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:serviceTask id="Activity_124fdng" name="Optimizer Parameters" camunda:asyncAfter="true" camunda:exclusive="false" camunda:type="external" camunda:topic="123456">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:outputParameter name="iterations">
              <camunda:script scriptFormat="groovy">def iterations = execution.getVariable("iterations");
							iterations = iterations + 1;
							return iterations;
					</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1n7keo8</bpmn:incoming>
        <bpmn:outgoing>Flow_1pj1qbm</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_12oknzl" sourceRef="Event_1peesj7" targetRef="Gateway_0abtadr" />
      <bpmn:sequenceFlow id="Flow_08uq4fy" name="No" sourceRef="Gateway_0abtadr" targetRef="Gateway_1echngq">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('iterations')!= null &amp;&amp; execution.getVariable('iterations') &gt;= 1}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_16xwigh" name="Yes" sourceRef="Gateway_0abtadr" targetRef="Activity_0709wqh">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('iterations')== null || execution.getVariable('iterations') &lt; 1}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_18ws272" sourceRef="Activity_0709wqh" targetRef="Gateway_1echngq" />
      <bpmn:sequenceFlow id="Flow_1n7keo8" sourceRef="Gateway_1echngq" targetRef="Activity_124fdng" />
      <bpmn:sequenceFlow id="Flow_1pj1qbm" sourceRef="Activity_124fdng" targetRef="Event_07mtfd5" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="Task_009hsrk" name="Generate Circuits" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitGeneratorService_w1/?csar">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">${execution.getVariable('selfserviceApplicationUrl')/execution-service}</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">
			    			    import groovy.json.JsonBuilder
                  def matrix = execution.getVariable("adjMatrix");
                  def gammas = execution.getVariable("gammas");
                  def betas = execution.getVariable("betas");
                  def request = [:];

                    if (matrix instanceof String) {
                        println("Received matrix of type string: " + matrix);
                        matrix = matrix.drop(1).take(matrix.length()-2);
                        matrix= matrix.replaceAll("\\s","").split("\\],\\[");
                        println("Separated matrix: " + matrix.toString());

                        new_matrix = []
                        for (el in matrix){
                            def current_array = el.replaceAll("\\[","").replaceAll("\\]","")
                            println("Current array: " + current_array.toString());
                            new_arr = [];
                            def numbers = current_array.split(",");
                            println("Numbers: " + numbers.toString());

                            for (number in numbers){
                                new_arr.push(number.toDouble());
                            }
                            new_matrix.push(new_arr);
                        }

                        matrix = new_matrix;
                        println("Matrix after parsing: " + matrix.toString());
                        execution.setVariable("adjMatrix", matrix);
                    }

                  if (gammas instanceof String) {
                             def current_gammas = gammas.replaceAll("\\[","").replaceAll("\\]","")
                              println("Current gammas: " + current_gammas.toString());
                              new_gammas = [];
                              def numbers = current_gammas.split(",");
                              for (number in numbers){
                                  new_gammas.push(number.toDouble());
                              }
                              gammas = new_gammas
                              execution.setVariable("gammas", gammas);
                  }

                    if (betas instanceof String) {
                               def current_betas = betas.replaceAll("\\[","").replaceAll("\\]","")
                                println("Current betas: " + current_betas.toString());
                                new_betas = [];
                                def numbers = current_betas.split(",");
                                for (number in numbers){
                                    new_betas.push(number.toDouble());
                                }
                                betas = new_betas
                                execution.setVariable("betas", betas);
                    }

                request.put("adj_matrix", matrix);
                  request.put("parameterized", "false");
                  request.put("p", 1);
                    request.put("gammas", gammas);
                    request.put("betas", betas);
                  if (execution.getVariable("wsBitstring") != null) {
                    request.put("initial_state", execution.getVariable("wsBitstring"));
                  }
                  requeststring = new JsonBuilder(request).toPrettyString()
                  print("test")
                  print(requeststring)
                  return requeststring;
</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="circuit">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
circuit= resp.get('circuit')
println(circuit);
return [circuit];</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="circuitDepthUntranspiled">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
depth= resp.get('depth')
println(depth);
return depth;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="circuitNumQubits">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
n_qubits= resp.get('n_qubits')
println(n_qubits);
return n_qubits;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="url">quokka/maxcut</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1m60wcg</bpmn:incoming>
      <bpmn:outgoing>Flow_18kx5os</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:subProcess id="Activity_1p2awjj" name="Select Hardware">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="circuitLanguage">openqasm</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_18kx5os</bpmn:incoming>
      <bpmn:outgoing>Flow_11f62wp</bpmn:outgoing>
      <bpmn:startEvent id="Event_0le3wrg" name="Start Hardware Selection Subprocess">
        <bpmn:outgoing>Flow_0h1ys46</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="Gateway_10t4daj" name="Hardware already selected?">
        <bpmn:incoming>Flow_0h1ys46</bpmn:incoming>
        <bpmn:outgoing>Flow_1jd7gsk</bpmn:outgoing>
        <bpmn:outgoing>Flow_02zgo8j</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_0h1ys46" sourceRef="Event_0le3wrg" targetRef="Gateway_10t4daj" />
      <bpmn:scriptTask id="Activity_1siuzrl" name="Invoke NISQ Analyzer" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="camunda_endpoint">http://192.168.178.107:8090/engine-rest</camunda:inputParameter>
            <camunda:inputParameter name="nisq_analyzer_endpoint_qpu_selection">http://192.168.178.107:8098/nisq-analyzer/qpu-selection</camunda:inputParameter>
            <camunda:inputParameter name="providers">ibmq</camunda:inputParameter>
            <camunda:inputParameter name="simulators_allowed">true</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1jd7gsk</bpmn:incoming>
        <bpmn:outgoing>Flow_0travi8</bpmn:outgoing>
        <bpmn:script>import groovy.json.*

def nisqAnalyzerEndpoint = execution.getVariable("nisq_analyzer_endpoint_qpu_selection");
def circuitLanguage = execution.getVariable("circuit_language");
if (circuitLanguage == null){
    circuitLanguage = execution.getVariable("circuitLanguage");
}

def quantumCircuit = execution.getVariable("quantum_circuit")
if (quantumCircuit == null){
    quantumCircuit = execution.getVariable("circuit");
}

def circuitString = null;
def circuitUrl = null;
if (quantumCircuit instanceof java.util.ArrayList){
    circuitString = quantumCircuit[0];
} else if (quantumCircuit instanceof String){
    circuitString = quantumCircuit;
} else {
    circuitUrl = execution.getVariable("camunda_endpoint");
    circuitUrl = circuitUrl.endsWith("/") ? circuitUrl : circuitUrl + "/";
    circuitUrl += "process-instance/" + execution.getProcessInstanceId() + "/variables/circuitString/data";
}

if(nisqAnalyzerEndpoint == null || circuitLanguage == null || quantumCircuit == null){
   throw new org.camunda.bpm.engine.delegate.BpmnError("Nisq Analyzer endpoint, quantum circuit, and circuit language must be set!");
}

def simulatorsAllowed = execution.getVariable("simulators_allowed");
if(simulatorsAllowed == null){
   simulatorsAllowed = "false";
}

def allowedProvidersList = [];
if(execution.getVariable("providers") != null){
   allowedProvidersList = execution.getVariable("providers").split(",");
}

def tokens = [:];
for (Object item : execution.getVariables().entrySet() ){
   def key = item.getKey();
   println key;
   if(key.startsWith("quantum_token_")) {

       def provider = key.split("_")[2];
       tokens.putAt(provider, item.getValue());
   }
}


def message = JsonOutput.toJson(["circuitUrl": circuitUrl, "simulatorsAllowed": simulatorsAllowed, "circuitLanguage": circuitLanguage, "tokens": tokens, "allowedProviders": allowedProvidersList, "compilers": ["qiskit"], "qasmCode": circuitString]);
println "Sending message: " + message;
def qpuSelectionUrl= nisq_analyzer_endpoint_qpu_selection

try {
   def post = new URL(qpuSelectionUrl).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");
   post.getOutputStream().write(message.getBytes("UTF-8"));

   def status = post.getResponseCode();
   if(status == 200){
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       def jobUrl = json.get("_links").get("self").get("href");
       int userIdRemoval = jobUrl.indexOf("{?userId}");
       if (userIdRemoval != -1){
          jobUrl = jobUrl.substring(0, userIdRemoval)
       }
       println "NISQ Analyzer invocation resulted in the following job URL: " + jobUrl;
       execution.setVariable("nisq_analyzer_job_url", jobUrl);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while invoking NISQ Analyzer!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + nisqAnalyzerEndpoint);
};</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1jd7gsk" name="no" sourceRef="Gateway_10t4daj" targetRef="Activity_1siuzrl">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("already_selected") == false || already_selected == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_0bx09fm" name="Selecting based on Queue Size" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_0travi8</bpmn:incoming>
        <bpmn:outgoing>Flow_03r4dtg</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
import org.camunda.bpm.engine.variable.value.FileValue
import org.camunda.bpm.engine.variable.Variables

def pollingUrl = execution.getVariable("nisq_analyzer_job_url");
println "Polling for NISQ Analyzer results at URL: " + pollingUrl
def ready = false;
def resultList = [];
while(ready == false) {
   println "Waiting 10 seconds for next polling request to the NISQ Analyzer at URL: " + pollingUrl
   sleep(10000)
   def get = new URL(pollingUrl).openConnection();
   get.setRequestMethod("GET");
   get.setDoOutput(true);

   def status = get.getResponseCode();
   if(status != 200){
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received invalid status code during polling: " + status);
   }
   def resultText = get.getInputStream().getText();
   def slurper = new JsonSlurper();
   def json = slurper.parseText(resultText);
   ready = json.get("ready");
   if(ready == true){
       resultList = json.get("qpuSelectionResultList");
   }
}

println "NISQ Analyzer job changed status to ready!"
println "Received " + resultList.size + " possible QPUs for the execution...";

if(resultList.size == 0){
   throw new org.camunda.bpm.engine.delegate.BpmnError("Found no suitable QPU, aborting!");
}

def sortedList = resultList.sort { it.queueSize };
def selectedQpu = resultList.get(0);
def providerName = selectedQpu.get("provider");
def qpuName = selectedQpu.get("qpu");
def language = selectedQpu.get("transpiledLanguage");
println "Selected QPU " + qpuName + " from provider " + providerName + "!";
execution.setVariable("selected_provider", providerName);
execution.setVariable("selected_qpu", qpuName);
execution.setVariable("circuit_language", language);
execution.setVariable("already_selected", true);
def circuitFile = new File("circuit.tmp");
circuitFile.write(selectedQpu.get("transpiledCircuit"));
FileValue typedFileValue = Variables
  .fileValue("circuit.tmp")
  .file(circuitFile)
  .mimeType("text/plain")
  .encoding("UTF-8")
  .create();
execution.setVariable("quantum_circuit", typedFileValue);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0travi8" sourceRef="Activity_1siuzrl" targetRef="Activity_0bx09fm" />
      <bpmn:scriptTask id="Activity_1w7j4wn" name="Retrieve Fragment to Transform" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_03r4dtg</bpmn:incoming>
        <bpmn:outgoing>Flow_1hyk0ks</bpmn:outgoing>
        <bpmn:script>import org.camunda.bpm.engine.variable.value.FileValue
import org.camunda.bpm.engine.variable.Variables
def xml = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:quantme="https://github.com/UST-QuAntiL/QuantME-Quantum4BPMN" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn"&gt;  &lt;bpmn:process id="Process_1" isExecutable="false"&gt;    &lt;bpmn:startEvent id="StartEvent_1"&gt;      &lt;bpmn:outgoing&gt;Flow_05z0vk6&lt;/bpmn:outgoing&gt;    &lt;/bpmn:startEvent&gt;    &lt;bpmn:endEvent id="Event_0zdju1d"&gt;      &lt;bpmn:incoming&gt;Flow_0iqmxyv&lt;/bpmn:incoming&gt;    &lt;/bpmn:endEvent&gt;    &lt;bpmn:subProcess id="Activity_1uxy6kv" name="Select Hardware"&gt;      &lt;bpmn:extensionElements&gt;        &lt;camunda:inputOutput&gt;          &lt;camunda:inputParameter name="circuitLanguage"&gt;openqasm&lt;/camunda:inputParameter&gt;        &lt;/camunda:inputOutput&gt;      &lt;/bpmn:extensionElements&gt;      &lt;bpmn:incoming&gt;Flow_05z0vk6&lt;/bpmn:incoming&gt;      &lt;bpmn:outgoing&gt;Flow_0iqmxyv&lt;/bpmn:outgoing&gt;      &lt;bpmn:startEvent id="Event_13b1guk"&gt;        &lt;bpmn:outgoing&gt;Flow_07dvuse&lt;/bpmn:outgoing&gt;      &lt;/bpmn:startEvent&gt;      &lt;quantme:quantumCircuitExecutionTask id="QuantumCircuitExecutionTask_0wz2egx" name="Execute QAOA Circuits" provider="ibm" qpu="aer_qasm_simulator" shots="2000" programmingLanguage="openqasm"&gt;        &lt;bpmn:extensionElements&gt;          &lt;camunda:inputOutput /&gt;        &lt;/bpmn:extensionElements&gt;        &lt;bpmn:incoming&gt;Flow_07dvuse&lt;/bpmn:incoming&gt;        &lt;bpmn:outgoing&gt;Flow_1uwufj7&lt;/bpmn:outgoing&gt;      &lt;/quantme:quantumCircuitExecutionTask&gt;      &lt;bpmn:endEvent id="Event_18zmysi"&gt;        &lt;bpmn:incoming&gt;Flow_1uwufj7&lt;/bpmn:incoming&gt;      &lt;/bpmn:endEvent&gt;      &lt;bpmn:sequenceFlow id="Flow_07dvuse" sourceRef="Event_13b1guk" targetRef="QuantumCircuitExecutionTask_0wz2egx" /&gt;      &lt;bpmn:sequenceFlow id="Flow_1uwufj7" sourceRef="QuantumCircuitExecutionTask_0wz2egx" targetRef="Event_18zmysi" /&gt;    &lt;/bpmn:subProcess&gt;    &lt;bpmn:sequenceFlow id="Flow_05z0vk6" sourceRef="StartEvent_1" targetRef="Activity_1uxy6kv" /&gt;    &lt;bpmn:sequenceFlow id="Flow_0iqmxyv" sourceRef="Activity_1uxy6kv" targetRef="Event_0zdju1d" /&gt;  &lt;/bpmn:process&gt;  &lt;bpmndi:BPMNDiagram id="BPMNDiagram_1"&gt;    &lt;bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"&gt;      &lt;bpmndi:BPMNShape id="Event_1ppzmjc_di" bpmnElement="StartEvent_1"&gt;        &lt;dc:Bounds x="173" y="102" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_0zdju1d_di" bpmnElement="Event_0zdju1d"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Activity_1uxy6kv_di" bpmnElement="Activity_1uxy6kv"&gt;        &lt;dc:Bounds x="-100" y="-50" width="300" height="200" /&gt;        &lt;bpmndi:BPMNLabel /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_13b1guk_di" bpmnElement="Event_13b1guk"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="QuantumCircuitExecutionTask_0wz2egx_di" bpmnElement="QuantumCircuitExecutionTask_0wz2egx"&gt;        &lt;dc:Bounds x="0" y="10" width="100" height="80" /&gt;        &lt;bpmndi:BPMNLabel /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_18zmysi_di" bpmnElement="Event_18zmysi"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNEdge id="Flow_07dvuse_di" bpmnElement="Flow_07dvuse"&gt;        &lt;di:waypoint x="50" y="32" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="70" y="10" /&gt;        &lt;di:waypoint x="70" y="-10" /&gt;        &lt;di:waypoint x="50" y="-10" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_1uwufj7_di" bpmnElement="Flow_1uwufj7"&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="50" y="-10" /&gt;        &lt;di:waypoint x="70" y="-10" /&gt;        &lt;di:waypoint x="70" y="10" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="50" y="32" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_05z0vk6_di" bpmnElement="Flow_05z0vk6"&gt;        &lt;di:waypoint x="191" y="102" /&gt;        &lt;di:waypoint x="191" y="-70" /&gt;        &lt;di:waypoint x="50" y="-70" /&gt;        &lt;di:waypoint x="50" y="-50" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_0iqmxyv_di" bpmnElement="Flow_0iqmxyv"&gt;        &lt;di:waypoint x="50" y="-50" /&gt;        &lt;di:waypoint x="50" y="-70" /&gt;        &lt;di:waypoint x="70" y="-70" /&gt;        &lt;di:waypoint x="70" y="-40" /&gt;        &lt;di:waypoint x="50" y="-40" /&gt;        &lt;di:waypoint x="50" y="32" /&gt;      &lt;/bpmndi:BPMNEdge&gt;    &lt;/bpmndi:BPMNPlane&gt;  &lt;/bpmndi:BPMNDiagram&gt;  &lt;bpmndi:BPMNDiagram id="BPMNDiagram_173y8c4"&gt;    &lt;bpmndi:BPMNPlane id="BPMNPlane_17100cb" bpmnElement="Activity_1uxy6kv" /&gt;  &lt;/bpmndi:BPMNDiagram&gt;&lt;/bpmn:definitions&gt;'
def file = new File("fragment.tmp");
file.write(xml);
FileValue typedFileValue = Variables
  .fileValue("fragment.tmp")
  .file(file)
  .mimeType("text/plain")
  .encoding("UTF-8")
  .create();
execution.setVariable("hardware_selection_fragment", typedFileValue);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_03r4dtg" sourceRef="Activity_0bx09fm" targetRef="Activity_1w7j4wn" />
      <bpmn:scriptTask id="Activity_159ur10" name="Invoke Transformation Framework" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="transformation_framework_endpoint">http://192.168.178.107:8888</camunda:inputParameter>
            <camunda:inputParameter name="camunda_endpoint">http://192.168.178.107:8090/engine-rest</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1hyk0ks</bpmn:incoming>
        <bpmn:outgoing>Flow_0pe7jjl</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
import org.camunda.bpm.engine.variable.value.FileValue

def transformationUrl = execution.getVariable("transformation_framework_endpoint");
transformationUrl = transformationUrl.endsWith("/") ? transformationUrl : transformationUrl + "/";
transformationUrl += "transform-workflow-hwselect";
println "Posting for transformation using the following URL: " + transformationUrl

def circuitUrl = execution.getVariable("camunda_endpoint");
circuitUrl = circuitUrl.endsWith("/") ? circuitUrl : circuitUrl + "/";
circuitUrl += "process-instance/" + execution.getProcessInstanceId() + "/variables/quantum_circuit/data";
println "Circuit accessible through URL: " + circuitUrl

FileValue fileVariable = execution.getVariableTyped("hardware_selection_fragment");
def fragment = fileVariable.getValue().getText("UTF-8");
def circuitLanguage = execution.getVariable("circuit_language");
def providerName = execution.getVariable("selected_provider");
def qpuName = execution.getVariable("selected_qpu");
def message = JsonOutput.toJson(["xml": fragment, "circuitLanguage": circuitLanguage, "provider": providerName, "qpu": qpuName]);
println "Sending message: " + message;

def pollingUrl = "";
try {
   def post = new URL(transformationUrl).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");
   post.getOutputStream().write(message.getBytes("UTF-8"));

   def status = post.getResponseCode();
   if(status == 200){
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       deploymentKey = json.get("deploymentKey");
       execution.setVariable("fragment_endpoint", deploymentKey);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while invoking Transformation Framework!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + transformationUrl);
}
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1hyk0ks" sourceRef="Activity_1w7j4wn" targetRef="Activity_159ur10" />
      <bpmn:exclusiveGateway id="Gateway_1qda2rk">
        <bpmn:incoming>Flow_0pe7jjl</bpmn:incoming>
        <bpmn:incoming>Flow_02zgo8j</bpmn:incoming>
        <bpmn:outgoing>Flow_0bl2sqy</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_0pe7jjl" sourceRef="Activity_159ur10" targetRef="Gateway_1qda2rk" />
      <bpmn:sequenceFlow id="Flow_02zgo8j" name="yes" sourceRef="Gateway_10t4daj" targetRef="Gateway_1qda2rk">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("already_selected") == true &amp;&amp; already_selected == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:callActivity id="Activity_0rsuypo" name="Invoke Transformed Fragment" camunda:asyncBefore="true" calledElement="${fragment_endpoint}">
        <bpmn:extensionElements>
          <camunda:in variables="all" />
          <camunda:out variables="all" />
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0bl2sqy</bpmn:incoming>
        <bpmn:outgoing>Flow_0sk4sfm</bpmn:outgoing>
      </bpmn:callActivity>
      <bpmn:sequenceFlow id="Flow_0bl2sqy" sourceRef="Gateway_1qda2rk" targetRef="Activity_0rsuypo" />
      <bpmn:endEvent id="Event_0xrzbik" name="Terminate Hardware Selection Subprocess">
        <bpmn:incoming>Flow_0sk4sfm</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0sk4sfm" sourceRef="Activity_0rsuypo" targetRef="Event_0xrzbik" />
    </bpmn:subProcess>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_070m5p1">
      <bpmndi:BPMNShape id="EndEvent_0pjq7fr_di" bpmnElement="EndEvent_0pjq7fr">
        <dc:Bounds x="3226" y="147" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="StartEvent_0ej6lwb_di" bpmnElement="StartEvent_0ej6lwb">
        <dc:Bounds x="0" y="147" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_06awxe9_di" bpmnElement="Task_1h88ddf">
        <dc:Bounds x="3076" y="125" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0vr629i" bpmnElement="Gateway_0wq36cd" isMarkerVisible="true">
        <dc:Bounds x="2976" y="140" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2971" y="197" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0pj22b3" bpmnElement="Gateway_0qaj4kt" isMarkerVisible="true">
        <dc:Bounds x="86" y="140" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_053f54p_di" bpmnElement="ResultEvaluationTask_0933y5e">
        <dc:Bounds x="1546" y="125" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1hcxfxi_di" bpmnElement="ParameterOptimizationTask_01m89mt">
        <dc:Bounds x="1696" y="0" width="1230" height="330" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_09hg9pe_di" bpmnElement="Task_009hsrk">
        <dc:Bounds x="186" y="125" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1gpbgd1_di" bpmnElement="Activity_1p2awjj">
        <dc:Bounds x="336" y="0" width="1160" height="330" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_134gyga_di" bpmnElement="SequenceFlow_134gyga">
        <di:waypoint x="3176" y="165" />
        <di:waypoint x="3226" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_17fnx68" bpmnElement="Flow_1m60wcg">
        <di:waypoint x="136" y="165" />
        <di:waypoint x="186" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0czrsh0_di" bpmnElement="Flow_0czrsh0">
        <di:waypoint x="3026" y="165" />
        <di:waypoint x="3076" y="165" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3051" y="141" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_18kx5os_di" bpmnElement="Flow_18kx5os">
        <di:waypoint x="286" y="165" />
        <di:waypoint x="336" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1qkl8n3_di" bpmnElement="Flow_1qkl8n3">
        <di:waypoint x="36" y="165" />
        <di:waypoint x="86" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tljgkh_di" bpmnElement="Flow_0tljgkh">
        <di:waypoint x="3001" y="190" />
        <di:waypoint x="2951" y="365" />
        <di:waypoint x="2311" y="365" />
        <di:waypoint x="1671" y="365" />
        <di:waypoint x="1596" y="365" />
        <di:waypoint x="1521" y="365" />
        <di:waypoint x="916" y="365" />
        <di:waypoint x="311" y="365" />
        <di:waypoint x="236" y="365" />
        <di:waypoint x="161" y="365" />
        <di:waypoint x="111" y="190" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wlfysg_di" bpmnElement="Flow_0wlfysg">
        <di:waypoint x="2926" y="165" />
        <di:waypoint x="2976" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05sf6lt_di" bpmnElement="Flow_05sf6lt">
        <di:waypoint x="1646" y="165" />
        <di:waypoint x="1696" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11f62wp_di" bpmnElement="Flow_11f62wp">
        <di:waypoint x="1496" y="165" />
        <di:waypoint x="1546" y="165" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1kmdmjg">
    <bpmndi:BPMNPlane id="BPMNPlane_0uoawmg" bpmnElement="ParameterOptimizationTask_01m89mt">
      <bpmndi:BPMNShape id="Event_1peesj7_di" bpmnElement="Event_1peesj7">
        <dc:Bounds x="1766" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0abtadr_di" bpmnElement="Gateway_0abtadr" isMarkerVisible="true">
        <dc:Bounds x="1852" y="50" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1838" y="26" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1echngq_di" bpmnElement="Gateway_1echngq" isMarkerVisible="true">
        <dc:Bounds x="2102" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_07mtfd5_di" bpmnElement="Event_07mtfd5">
        <dc:Bounds x="2352" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0709wqh_di" bpmnElement="Activity_0709wqh">
        <dc:Bounds x="1952" y="110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_124fdng_di" bpmnElement="Activity_124fdng">
        <dc:Bounds x="2202" y="35" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_12oknzl_di" bpmnElement="Flow_12oknzl">
        <di:waypoint x="1802" y="75" />
        <di:waypoint x="1852" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08uq4fy_di" bpmnElement="Flow_08uq4fy">
        <di:waypoint x="1902" y="75" />
        <di:waypoint x="1927" y="75" />
        <di:waypoint x="2002" y="75" />
        <di:waypoint x="2077" y="75" />
        <di:waypoint x="2102" y="75" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2039.5" y="51" width="14" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_16xwigh_di" bpmnElement="Flow_16xwigh">
        <di:waypoint x="1877" y="100" />
        <di:waypoint x="1877" y="150" />
        <di:waypoint x="1952" y="150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1914.5" y="126" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_18ws272_di" bpmnElement="Flow_18ws272">
        <di:waypoint x="2052" y="150" />
        <di:waypoint x="2127" y="150" />
        <di:waypoint x="2127" y="100" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1n7keo8_di" bpmnElement="Flow_1n7keo8">
        <di:waypoint x="2152" y="75" />
        <di:waypoint x="2202" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1pj1qbm_di" bpmnElement="Flow_1pj1qbm">
        <di:waypoint x="2302" y="75" />
        <di:waypoint x="2352" y="75" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_0kdiw8n">
    <bpmndi:BPMNPlane id="BPMNPlane_1dogkn8" bpmnElement="Activity_1p2awjj">
      <bpmndi:BPMNShape id="Event_0le3wrg_di" bpmnElement="Event_0le3wrg">
        <dc:Bounds x="406" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_10t4daj_di" bpmnElement="Gateway_10t4daj" isMarkerVisible="true">
        <dc:Bounds x="492" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1siuzrl_di" bpmnElement="Activity_1siuzrl">
        <dc:Bounds x="592" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0bx09fm_di" bpmnElement="Activity_0bx09fm">
        <dc:Bounds x="742" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1w7j4wn_di" bpmnElement="Activity_1w7j4wn">
        <dc:Bounds x="892" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_159ur10_di" bpmnElement="Activity_159ur10">
        <dc:Bounds x="1042" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1qda2rk_di" bpmnElement="Gateway_1qda2rk" isMarkerVisible="true">
        <dc:Bounds x="1192" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rsuypo_di" bpmnElement="Activity_0rsuypo">
        <dc:Bounds x="1292" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0xrzbik_di" bpmnElement="Event_0xrzbik">
        <dc:Bounds x="1442" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0h1ys46_di" bpmnElement="Flow_0h1ys46">
        <di:waypoint x="442" y="75" />
        <di:waypoint x="492" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jd7gsk_di" bpmnElement="Flow_1jd7gsk">
        <di:waypoint x="542" y="75" />
        <di:waypoint x="592" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0travi8_di" bpmnElement="Flow_0travi8">
        <di:waypoint x="692" y="75" />
        <di:waypoint x="742" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_03r4dtg_di" bpmnElement="Flow_03r4dtg">
        <di:waypoint x="842" y="75" />
        <di:waypoint x="892" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hyk0ks_di" bpmnElement="Flow_1hyk0ks">
        <di:waypoint x="992" y="75" />
        <di:waypoint x="1042" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0pe7jjl_di" bpmnElement="Flow_0pe7jjl">
        <di:waypoint x="1142" y="75" />
        <di:waypoint x="1192" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_02zgo8j_di" bpmnElement="Flow_02zgo8j">
        <di:waypoint x="517" y="100" />
        <di:waypoint x="567" y="150" />
        <di:waypoint x="642" y="150" />
        <di:waypoint x="717" y="150" />
        <di:waypoint x="792" y="150" />
        <di:waypoint x="867" y="150" />
        <di:waypoint x="942" y="150" />
        <di:waypoint x="1017" y="150" />
        <di:waypoint x="1092" y="150" />
        <di:waypoint x="1167" y="150" />
        <di:waypoint x="1217" y="100" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0bl2sqy_di" bpmnElement="Flow_0bl2sqy">
        <di:waypoint x="1242" y="75" />
        <di:waypoint x="1292" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0sk4sfm_di" bpmnElement="Flow_0sk4sfm">
        <di:waypoint x="1392" y="75" />
        <di:waypoint x="1442" y="75" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
