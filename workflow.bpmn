<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:opentosca="https://github.com/UST-QuAntiL/OpenTOSCA" id="Definitions_0wzkc0b" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20230126">
  <bpmn:process id="Process_070m5p1" isExecutable="true">
    <bpmn:endEvent id="EndEvent_0pjq7fr">
      <bpmn:incoming>SequenceFlow_134gyga</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:startEvent id="StartEvent_0ej6lwb">
      <bpmn:extensionElements>
        <camunda:formData>
          <camunda:formField id="adjMatrix" label="Array containing adj_matrix" type="string" defaultValue="[[0,3,3,6,9,1],[3,0,4,4,-8,4],[3,4,0,3,-7,1],[6,4,3,0,-7,6],[9,-8,-7,-7,0,-5],[1,4,1,6,-5,0]]" />
          <camunda:formField id="quantum_token_ibmq" label="IBMQ Token" type="string" />
          <camunda:formField id="hub" label="IBMQ Hub" type="string" defaultValue="ibm-q" />
          <camunda:formField id="group" label="IBMQ Group" type="string" defaultValue="open" />
          <camunda:formField id="project" label="IBMQ Project" type="string" defaultValue="main" />
          <camunda:formField id="ibmqUrl" label="IBMQ URL" type="string" defaultValue="https://auth.quantum-computing.ibm.com/api" />
          <camunda:formField id="qpu" label="IBMQ Backend name" type="string" defaultValue="simulator" />
          <camunda:formField id="noiseModel" label="Noise Model" type="string" />
          <camunda:formField id="onlyMeasurementErrors" label="Noise Model contains only measurement errors" type="boolean" />
          <camunda:formField id="gammas" label="gammas" type="string" defaultValue="[1]" />
          <camunda:formField id="betas" label="betas" type="string" defaultValue="[1]" />
          <camunda:formField id="p" label="p" type="string" defaultValue="1" />
        </camunda:formData>
      </bpmn:extensionElements>
      <bpmn:outgoing>Flow_1qkl8n3</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_134gyga" sourceRef="Task_1h88ddf" targetRef="EndEvent_0pjq7fr" />
    <bpmn:userTask id="Task_1h88ddf" name="Analyze Results">
      <bpmn:extensionElements>
        <camunda:formData>
          <camunda:formField id="plotUrl" label="Result Image URL" type="string">
            <camunda:properties>
              <camunda:property id="Property_39pgd42" />
            </camunda:properties>
            <camunda:validation>
              <camunda:constraint name="readonly" />
            </camunda:validation>
          </camunda:formField>
        </camunda:formData>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0czrsh0</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_134gyga</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="Gateway_0wq36cd" name="Converged?">
      <bpmn:incoming>Flow_0wlfysg</bpmn:incoming>
      <bpmn:outgoing>Flow_0czrsh0</bpmn:outgoing>
      <bpmn:outgoing>Flow_0tljgkh</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="Gateway_0qaj4kt">
      <bpmn:incoming>Flow_1qkl8n3</bpmn:incoming>
      <bpmn:incoming>Flow_0tljgkh</bpmn:incoming>
      <bpmn:outgoing>Flow_1m60wcg</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1m60wcg" sourceRef="Gateway_0qaj4kt" targetRef="Task_009hsrk" />
    <bpmn:sequenceFlow id="Flow_0czrsh0" name="Yes" sourceRef="Gateway_0wq36cd" targetRef="Task_1h88ddf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('converged')!= null &amp;&amp; execution.getVariable('converged') != 'false'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_18kx5os" sourceRef="Task_009hsrk" targetRef="Activity_1p2awjj" />
    <bpmn:sequenceFlow id="Flow_1qkl8n3" sourceRef="StartEvent_0ej6lwb" targetRef="Gateway_0qaj4kt" />
    <bpmn:sequenceFlow id="Flow_0tljgkh" sourceRef="Gateway_0wq36cd" targetRef="Gateway_0qaj4kt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('converged')== null || execution.getVariable('converged') == 'false'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0wlfysg" sourceRef="ParameterOptimizationTask_01m89mt" targetRef="Gateway_0wq36cd" />
    <bpmn:sequenceFlow id="Flow_05sf6lt" sourceRef="ResultEvaluationTask_0933y5e" targetRef="ParameterOptimizationTask_01m89mt" />
    <bpmn:sequenceFlow id="Flow_11f62wp" sourceRef="Activity_1p2awjj" targetRef="ResultEvaluationTask_0933y5e" />
    <bpmn:serviceTask id="ResultEvaluationTask_0933y5e" name="Evaluate Results" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaResultEvaluationService_w1/?csar">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/objective-evaluation/objective/max-cut</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">  import groovy.json.JsonBuilder
  def adjMatrix = execution.getVariable("adjMatrix");
  def mitigatedCounts = execution.getVariable("mitigatedCounts");
  def counts = execution.getVariable("counts")[0];
  def objFun = execution.getVariable("objectiveFunction");

  if (mitigatedCounts != null) {
    counts = mitigatedCounts
  }

  def request = [:];
  request.put("visualization", "True"  )
  request.put("adj_matrix", adjMatrix);
  request.put("counts", counts);
  request.put("objFun", objFun);

  def objFun_hyperparameters = [:]
  if (execution.getVariable("alpha") != null){
    objFun_hyperparameters.put("alpha", execution.getVariable("alpha"));
  }
  if (execution.getVariable("eta") != null){
    objFun_hyperparameters.put("eta", execution.getVariable("eta"));
  }
  request.put("objFun_hyperparameters", objFun_hyperparameters);

  execution.setVariable("plotUrl", "http://localhost:8090/engine-rest/process-instance/" + execution.getProcessInstanceId() + "/variables/maxCutPlot/data");

  requeststring = new JsonBuilder(request).toPrettyString()
  return requeststring;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="objValue">
              <camunda:script scriptFormat="Groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
objValue= resp.get('objective_value')
println("obj values:" + objValue.toString());
return objValue.toDouble();</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="evaluatedCosts">
              <camunda:script scriptFormat="Groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp)
costs= resp.get('costs')
println(costs);
return costs;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="maxCutPlot">
              <camunda:script scriptFormat="Groovy">import org.camunda.bpm.engine.variable.value.FileValue
								import org.camunda.bpm.engine.variable.Variables
                import groovy.json.JsonSlurper
                def slurper = new JsonSlurper().parseText(response)
								String filename = "plot.png";
								FileValue typedFileValue = Variables.fileValue(filename).file(slurper.visualization.decodeBase64()).mimeType("application/png").create()
typedFileValue</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="objectiveFunction">expectationValue</camunda:inputParameter>
          <camunda:inputParameter name="costFunction">maxcut</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_11f62wp</bpmn:incoming>
      <bpmn:outgoing>Flow_05sf6lt</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:subProcess id="ParameterOptimizationTask_01m89mt" name="Optimize QAOA Parameters">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="optimizer">cobyla</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_05sf6lt</bpmn:incoming>
      <bpmn:outgoing>Flow_0wlfysg</bpmn:outgoing>
      <bpmn:startEvent id="Event_04l46qq">
        <bpmn:outgoing>Flow_0fhtong</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="Gateway_1i7zth4" name="Is first Iteration?">
        <bpmn:incoming>Flow_0fhtong</bpmn:incoming>
        <bpmn:outgoing>Flow_0lmmljd</bpmn:outgoing>
        <bpmn:outgoing>Flow_0jqhmaj</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:exclusiveGateway id="Gateway_1kr3ron">
        <bpmn:incoming>Flow_0lmmljd</bpmn:incoming>
        <bpmn:incoming>Flow_1cfcslk</bpmn:incoming>
        <bpmn:outgoing>Flow_03ngcci</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:endEvent id="Event_1u5y1m4">
        <bpmn:incoming>Flow_185dnvw</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:serviceTask id="Activity_09mptza" name="Initialize Optimizer" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaOptimizationService_w1/?csar">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="Content-Type">application/json</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/optimization/optimization-service</camunda:inputParameter>
              <camunda:inputParameter name="payload">
                <camunda:script scriptFormat="groovy">
			          import groovy.json.JsonBuilder
                def optimizer = execution.getVariable("optimizer");
                def gammas = execution.getVariable("gammas");
                def betas = execution.getVariable("betas");
                def initialParameters = betas + gammas;
                execution.setVariable("iterations", 0);

                def request = [:];
                request.put("topic", "12345");
                request.put("optimizer", optimizer);
                request.put("initialParameters", initialParameters);
                requeststring = new JsonBuilder(request).toPrettyString();
                return requeststring;
                </camunda:script>
              </camunda:inputParameter>
              <camunda:outputParameter name="iterations">
                <camunda:script scriptFormat="groovy">
                def iterations = connector.getVariable("iterations");
                iterations = iterations + 1;
                return iterations;
                </camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="converged">
                <camunda:script scriptFormat="groovy">return "false";</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0jqhmaj</bpmn:incoming>
        <bpmn:outgoing>Flow_1cfcslk</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:serviceTask id="Activity_1jbhkv8" name="Optimizer Parameters" camunda:asyncAfter="true" camunda:exclusive="false" camunda:type="external" camunda:topic="12345">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:outputParameter name="iterations">
              <camunda:script scriptFormat="groovy">def iterations = execution.getVariable("iterations");
							iterations = iterations + 1;
							return iterations;
					</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_03ngcci</bpmn:incoming>
        <bpmn:outgoing>Flow_185dnvw</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_0fhtong" sourceRef="Event_04l46qq" targetRef="Gateway_1i7zth4" />
      <bpmn:sequenceFlow id="Flow_0lmmljd" name="No" sourceRef="Gateway_1i7zth4" targetRef="Gateway_1kr3ron">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('iterations')!= null &amp;&amp; execution.getVariable('iterations') &gt;= 1}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0jqhmaj" name="Yes" sourceRef="Gateway_1i7zth4" targetRef="Activity_09mptza">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('iterations')== null || execution.getVariable('iterations') &lt; 1}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_1cfcslk" sourceRef="Activity_09mptza" targetRef="Gateway_1kr3ron" />
      <bpmn:sequenceFlow id="Flow_03ngcci" sourceRef="Gateway_1kr3ron" targetRef="Activity_1jbhkv8" />
      <bpmn:sequenceFlow id="Flow_185dnvw" sourceRef="Activity_1jbhkv8" targetRef="Event_1u5y1m4" />
    </bpmn:subProcess>
    <bpmn:serviceTask id="Task_009hsrk" name="Generate Circuits" camunda:asyncAfter="true" camunda:exclusive="false" opentosca:deploymentModelUrl="{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitGeneratorService_w1/?csar">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/circuit-generation/algorithms/maxcutqaoa</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">
			    			    import groovy.json.JsonBuilder
                  def matrix = execution.getVariable("adjMatrix");
                  def gammas = execution.getVariable("gammas");
                  def betas = execution.getVariable("betas");
                  def request = [:];

                    if (matrix instanceof String) {
                        println("Received matrix of type string: " + matrix);
                        matrix = matrix.drop(1).take(matrix.length()-2);
                        matrix= matrix.replaceAll("\\s","").split("\\],\\[");
                        println("Separated matrix: " + matrix.toString());

                        new_matrix = []
                        for (el in matrix){
                            def current_array = el.replaceAll("\\[","").replaceAll("\\]","")
                            println("Current array: " + current_array.toString());
                            new_arr = [];
                            def numbers = current_array.split(",");
                            println("Numbers: " + numbers.toString());

                            for (number in numbers){
                                new_arr.push(number.toDouble());
                            }
                            new_matrix.push(new_arr);
                        }

                        matrix = new_matrix;
                        println("Matrix after parsing: " + matrix.toString());
                        execution.setVariable("adjMatrix", matrix);
                    }

                  if (gammas instanceof String) {
                             def current_gammas = gammas.replaceAll("\\[","").replaceAll("\\]","")
                              println("Current gammas: " + current_gammas.toString());
                              new_gammas = [];
                              def numbers = current_gammas.split(",");
                              for (number in numbers){
                                  new_gammas.push(number.toDouble());
                              }
                              gammas = new_gammas
                              execution.setVariable("gammas", gammas);
                  }

                    if (betas instanceof String) {
                               def current_betas = betas.replaceAll("\\[","").replaceAll("\\]","")
                                println("Current betas: " + current_betas.toString());
                                new_betas = [];
                                def numbers = current_betas.split(",");
                                for (number in numbers){
                                    new_betas.push(number.toDouble());
                                }
                                betas = new_betas
                                execution.setVariable("betas", betas);
                    }

                request.put("adj_matrix", matrix);
                  request.put("parameterized", "false");
                  request.put("p", 1);
                    request.put("gammas", gammas);
                    request.put("betas", betas);
                  if (execution.getVariable("wsBitstring") != null) {
                    request.put("initial_state", execution.getVariable("wsBitstring"));
                  }
                  requeststring = new JsonBuilder(request).toPrettyString()
                  print("test")
                  print(requeststring)
                  return requeststring;
</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="circuit">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
circuit= resp.get('circuit')
println(circuit);
return [circuit];</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="circuitDepthUntranspiled">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
depth= resp.get('depth')
println(depth);
return depth;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="circuitNumQubits">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
n_qubits= resp.get('n_qubits')
println(n_qubits);
return n_qubits;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
        <camunda:inputOutput>
          <camunda:inputParameter name="url">quokka/maxcut</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1m60wcg</bpmn:incoming>
      <bpmn:outgoing>Flow_18kx5os</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:subProcess id="Activity_1p2awjj" name="Select Hardware">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="circuitLanguage">openqasm</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_18kx5os</bpmn:incoming>
      <bpmn:outgoing>Flow_11f62wp</bpmn:outgoing>
      <bpmn:startEvent id="Event_1n6hipv" name="Start Hardware Selection Subprocess">
        <bpmn:outgoing>Flow_09tw49y</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="Gateway_1d9r8bt" name="Hardware already selected?">
        <bpmn:incoming>Flow_09tw49y</bpmn:incoming>
        <bpmn:outgoing>Flow_0lwge0j</bpmn:outgoing>
        <bpmn:outgoing>Flow_11frg26</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_09tw49y" sourceRef="Event_1n6hipv" targetRef="Gateway_1d9r8bt" />
      <bpmn:scriptTask id="Activity_0go0afx" name="Invoke NISQ Analyzer" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="camunda_endpoint">http://localhost:8090/engine-rest</camunda:inputParameter>
            <camunda:inputParameter name="nisq_analyzer_endpoint_qpu_selection">http://192.168.178.107:8098/nisq-analyzer/qpu-selection</camunda:inputParameter>
            <camunda:inputParameter name="providers">ibmq</camunda:inputParameter>
            <camunda:inputParameter name="simulators_allowed">true</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0lwge0j</bpmn:incoming>
        <bpmn:outgoing>Flow_1v4lyfl</bpmn:outgoing>
        <bpmn:script>import groovy.json.*

def nisqAnalyzerEndpoint = execution.getVariable("nisq_analyzer_endpoint_qpu_selection");
def circuitLanguage = execution.getVariable("circuit_language");
if (circuitLanguage == null){
    circuitLanguage = execution.getVariable("circuitLanguage");
}

def quantumCircuit = execution.getVariable("quantum_circuit")
if (quantumCircuit == null){
    quantumCircuit = execution.getVariable("circuit");
}

def circuitString = null;
def circuitUrl = null;
if (quantumCircuit instanceof java.util.ArrayList){
    circuitString = quantumCircuit[0];
} else if (quantumCircuit instanceof String){
    circuitString = quantumCircuit;
} else {
    circuitUrl = execution.getVariable("camunda_endpoint");
    circuitUrl = circuitUrl.endsWith("/") ? circuitUrl : circuitUrl + "/";
    circuitUrl += "process-instance/" + execution.getProcessInstanceId() + "/variables/circuitString/data";
}

if(nisqAnalyzerEndpoint == null || circuitLanguage == null || quantumCircuit == null){
   throw new org.camunda.bpm.engine.delegate.BpmnError("Nisq Analyzer endpoint, quantum circuit, and circuit language must be set!");
}

def simulatorsAllowed = execution.getVariable("simulators_allowed");
if(simulatorsAllowed == null){
   simulatorsAllowed = "false";
}

def allowedProvidersList = [];
if(execution.getVariable("providers") != null){
   allowedProvidersList = execution.getVariable("providers").split(",");
}

def tokens = [:];
for (Object item : execution.getVariables().entrySet() ){
   def key = item.getKey();
   println key;
   if(key.startsWith("quantum_token_")) {

       def provider = key.split("_")[2];
       tokens.putAt(provider, item.getValue());
   }
}


def message = JsonOutput.toJson(["circuitUrl": circuitUrl, "simulatorsAllowed": simulatorsAllowed, "circuitLanguage": circuitLanguage, "tokens": tokens, "allowedProviders": allowedProvidersList, "compilers": ["qiskit"], "qasmCode": circuitString]);
println "Sending message: " + message;
def qpuSelectionUrl= nisq_analyzer_endpoint_qpu_selection

try {
   def post = new URL(qpuSelectionUrl).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");
   post.getOutputStream().write(message.getBytes("UTF-8"));

   def status = post.getResponseCode();
   if(status == 200){
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       def jobUrl = json.get("_links").get("self").get("href");
       int userIdRemoval = jobUrl.indexOf("{?userId}");
       if (userIdRemoval != -1){
          jobUrl = jobUrl.substring(0, userIdRemoval)
       }
       println "NISQ Analyzer invocation resulted in the following job URL: " + jobUrl;
       execution.setVariable("nisq_analyzer_job_url", jobUrl);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while invoking NISQ Analyzer!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + nisqAnalyzerEndpoint);
};</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0lwge0j" name="no" sourceRef="Gateway_1d9r8bt" targetRef="Activity_0go0afx">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("already_selected") == false || already_selected == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_0samvsh" name="Selecting based on Queue Size" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_1v4lyfl</bpmn:incoming>
        <bpmn:outgoing>Flow_1jom0y5</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
import org.camunda.bpm.engine.variable.value.FileValue
import org.camunda.bpm.engine.variable.Variables

def pollingUrl = execution.getVariable("nisq_analyzer_job_url");
println "Polling for NISQ Analyzer results at URL: " + pollingUrl
def ready = false;
def resultList = [];
while(ready == false) {
   println "Waiting 10 seconds for next polling request to the NISQ Analyzer at URL: " + pollingUrl
   sleep(10000)
   def get = new URL(pollingUrl).openConnection();
   get.setRequestMethod("GET");
   get.setDoOutput(true);

   def status = get.getResponseCode();
   if(status != 200){
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received invalid status code during polling: " + status);
   }
   def resultText = get.getInputStream().getText();
   def slurper = new JsonSlurper();
   def json = slurper.parseText(resultText);
   ready = json.get("ready");
   if(ready == true){
       resultList = json.get("qpuSelectionResultList");
   }
}

println "NISQ Analyzer job changed status to ready!"
println "Received " + resultList.size + " possible QPUs for the execution...";

if(resultList.size == 0){
   throw new org.camunda.bpm.engine.delegate.BpmnError("Found no suitable QPU, aborting!");
}

def sortedList = resultList.sort { it.queueSize };
def selectedQpu = resultList.get(0);
def providerName = selectedQpu.get("provider");
def qpuName = selectedQpu.get("qpu");
def language = selectedQpu.get("transpiledLanguage");
println "Selected QPU " + qpuName + " from provider " + providerName + "!";
execution.setVariable("selected_provider", providerName);
execution.setVariable("selected_qpu", qpuName);
execution.setVariable("circuit_language", language);
execution.setVariable("already_selected", true);
def circuitFile = new File("circuit.tmp");
circuitFile.write(selectedQpu.get("transpiledCircuit"));
FileValue typedFileValue = Variables
  .fileValue("circuit.tmp")
  .file(circuitFile)
  .mimeType("text/plain")
  .encoding("UTF-8")
  .create();
execution.setVariable("quantum_circuit", typedFileValue);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1v4lyfl" sourceRef="Activity_0go0afx" targetRef="Activity_0samvsh" />
      <bpmn:scriptTask id="Activity_0az1znc" name="Retrieve Fragment to Transform" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_1jom0y5</bpmn:incoming>
        <bpmn:outgoing>Flow_0tqyfjg</bpmn:outgoing>
        <bpmn:script>import org.camunda.bpm.engine.variable.value.FileValue
import org.camunda.bpm.engine.variable.Variables
def xml = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:quantme="https://github.com/UST-QuAntiL/QuantME-Quantum4BPMN" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn"&gt;  &lt;bpmn:process id="Process_1" isExecutable="false"&gt;    &lt;bpmn:startEvent id="StartEvent_1"&gt;      &lt;bpmn:outgoing&gt;Flow_1ulvk36&lt;/bpmn:outgoing&gt;    &lt;/bpmn:startEvent&gt;    &lt;bpmn:endEvent id="Event_0xnk9yk"&gt;      &lt;bpmn:incoming&gt;Flow_0uwdq0v&lt;/bpmn:incoming&gt;    &lt;/bpmn:endEvent&gt;    &lt;bpmn:subProcess id="Activity_1s1yroq" name="Select Hardware"&gt;      &lt;bpmn:extensionElements&gt;        &lt;camunda:inputOutput&gt;          &lt;camunda:inputParameter name="circuitLanguage"&gt;openqasm&lt;/camunda:inputParameter&gt;        &lt;/camunda:inputOutput&gt;      &lt;/bpmn:extensionElements&gt;      &lt;bpmn:incoming&gt;Flow_1ulvk36&lt;/bpmn:incoming&gt;      &lt;bpmn:outgoing&gt;Flow_0uwdq0v&lt;/bpmn:outgoing&gt;      &lt;bpmn:startEvent id="Event_09meix8"&gt;        &lt;bpmn:outgoing&gt;Flow_1ueosko&lt;/bpmn:outgoing&gt;      &lt;/bpmn:startEvent&gt;      &lt;quantme:quantumCircuitExecutionTask id="QuantumCircuitExecutionTask_1qktlqx" name="Execute QAOA Circuits" provider="ibm" qpu="aer_qasm_simulator" shots="2000" programmingLanguage="openqasm"&gt;        &lt;bpmn:extensionElements&gt;          &lt;camunda:inputOutput /&gt;        &lt;/bpmn:extensionElements&gt;        &lt;bpmn:incoming&gt;Flow_1ueosko&lt;/bpmn:incoming&gt;        &lt;bpmn:outgoing&gt;Flow_0cjblch&lt;/bpmn:outgoing&gt;      &lt;/quantme:quantumCircuitExecutionTask&gt;      &lt;bpmn:endEvent id="Event_06vl8n2"&gt;        &lt;bpmn:incoming&gt;Flow_0cjblch&lt;/bpmn:incoming&gt;      &lt;/bpmn:endEvent&gt;      &lt;bpmn:sequenceFlow id="Flow_1ueosko" sourceRef="Event_09meix8" targetRef="QuantumCircuitExecutionTask_1qktlqx" /&gt;      &lt;bpmn:sequenceFlow id="Flow_0cjblch" sourceRef="QuantumCircuitExecutionTask_1qktlqx" targetRef="Event_06vl8n2" /&gt;    &lt;/bpmn:subProcess&gt;    &lt;bpmn:sequenceFlow id="Flow_1ulvk36" sourceRef="StartEvent_1" targetRef="Activity_1s1yroq" /&gt;    &lt;bpmn:sequenceFlow id="Flow_0uwdq0v" sourceRef="Activity_1s1yroq" targetRef="Event_0xnk9yk" /&gt;  &lt;/bpmn:process&gt;  &lt;bpmndi:BPMNDiagram id="BPMNDiagram_1"&gt;    &lt;bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"&gt;      &lt;bpmndi:BPMNShape id="Event_00lst26_di" bpmnElement="StartEvent_1"&gt;        &lt;dc:Bounds x="173" y="102" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_0xnk9yk_di" bpmnElement="Event_0xnk9yk"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Activity_1s1yroq_di" bpmnElement="Activity_1s1yroq"&gt;        &lt;dc:Bounds x="-100" y="-50" width="300" height="200" /&gt;        &lt;bpmndi:BPMNLabel /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_09meix8_di" bpmnElement="Event_09meix8"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="QuantumCircuitExecutionTask_1qktlqx_di" bpmnElement="QuantumCircuitExecutionTask_1qktlqx"&gt;        &lt;dc:Bounds x="0" y="10" width="100" height="80" /&gt;        &lt;bpmndi:BPMNLabel /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_06vl8n2_di" bpmnElement="Event_06vl8n2"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNEdge id="Flow_1ueosko_di" bpmnElement="Flow_1ueosko"&gt;        &lt;di:waypoint x="50" y="32" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="70" y="10" /&gt;        &lt;di:waypoint x="70" y="-10" /&gt;        &lt;di:waypoint x="50" y="-10" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_0cjblch_di" bpmnElement="Flow_0cjblch"&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="50" y="-10" /&gt;        &lt;di:waypoint x="70" y="-10" /&gt;        &lt;di:waypoint x="70" y="10" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="50" y="32" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_1ulvk36_di" bpmnElement="Flow_1ulvk36"&gt;        &lt;di:waypoint x="191" y="102" /&gt;        &lt;di:waypoint x="191" y="-70" /&gt;        &lt;di:waypoint x="50" y="-70" /&gt;        &lt;di:waypoint x="50" y="-50" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_0uwdq0v_di" bpmnElement="Flow_0uwdq0v"&gt;        &lt;di:waypoint x="50" y="-50" /&gt;        &lt;di:waypoint x="50" y="-70" /&gt;        &lt;di:waypoint x="70" y="-70" /&gt;        &lt;di:waypoint x="70" y="-40" /&gt;        &lt;di:waypoint x="50" y="-40" /&gt;        &lt;di:waypoint x="50" y="32" /&gt;      &lt;/bpmndi:BPMNEdge&gt;    &lt;/bpmndi:BPMNPlane&gt;  &lt;/bpmndi:BPMNDiagram&gt;  &lt;bpmndi:BPMNDiagram id="BPMNDiagram_0v6g1yx"&gt;    &lt;bpmndi:BPMNPlane id="BPMNPlane_1dwq34y" bpmnElement="Activity_1s1yroq" /&gt;  &lt;/bpmndi:BPMNDiagram&gt;&lt;/bpmn:definitions&gt;'
def file = new File("fragment.tmp");
file.write(xml);
FileValue typedFileValue = Variables
  .fileValue("fragment.tmp")
  .file(file)
  .mimeType("text/plain")
  .encoding("UTF-8")
  .create();
execution.setVariable("hardware_selection_fragment", typedFileValue);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1jom0y5" sourceRef="Activity_0samvsh" targetRef="Activity_0az1znc" />
      <bpmn:scriptTask id="Activity_0syl63w" name="Invoke Transformation Framework" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="transformation_framework_endpoint">http://192.168.178.107:8888</camunda:inputParameter>
            <camunda:inputParameter name="camunda_endpoint">http://localhost:8090/engine-rest</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0tqyfjg</bpmn:incoming>
        <bpmn:outgoing>Flow_0zjp1n8</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
import org.camunda.bpm.engine.variable.value.FileValue

def transformationUrl = execution.getVariable("transformation_framework_endpoint");
transformationUrl = transformationUrl.endsWith("/") ? transformationUrl : transformationUrl + "/";
transformationUrl += "transform-workflow-hwselect";
println "Posting for transformation using the following URL: " + transformationUrl

def circuitUrl = execution.getVariable("camunda_endpoint");
circuitUrl = circuitUrl.endsWith("/") ? circuitUrl : circuitUrl + "/";
circuitUrl += "process-instance/" + execution.getProcessInstanceId() + "/variables/quantum_circuit/data";
println "Circuit accessible through URL: " + circuitUrl

FileValue fileVariable = execution.getVariableTyped("hardware_selection_fragment");
def fragment = fileVariable.getValue().getText("UTF-8");
def circuitLanguage = execution.getVariable("circuit_language");
def providerName = execution.getVariable("selected_provider");
def qpuName = execution.getVariable("selected_qpu");
def message = JsonOutput.toJson(["xml": fragment, "circuitLanguage": circuitLanguage, "provider": providerName, "qpu": qpuName]);
println "Sending message: " + message;

def pollingUrl = "";
try {
    def post = new URL(transformationUrl).openConnection();
    post.setRequestMethod("POST");
    post.setDoOutput(true);
    post.setRequestProperty("Content-Type", "application/json");
    post.setRequestProperty("accept", "application/json");
    post.getOutputStream().write(message.getBytes("UTF-8"));

    def status = post.getResponseCode();
    if(status == 200){
        def resultText = post.getInputStream().getText();
        def slurper = new JsonSlurper();
        def json = slurper.parseText(resultText);
//        pollingUrl = transformationUrl + "/" + json.get("id");
//        println "Transformation Framework returned job with URL: " + pollingUrl;
//        execution.setVariable("transformation_framework_job_url", pollingUrl);
        transformedWF = json.get("xml");
        execution.setVariable("transformedHWSelectionWF", transformedWF);
    }else{
        throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while invoking Transformation Framework!");
    }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
    println e.errorCode;
    throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
    println e;
    throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + transformationUrl);
}
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0tqyfjg" sourceRef="Activity_0az1znc" targetRef="Activity_0syl63w" />
      <bpmn:scriptTask id="Activity_0bxie4r" name="Poll for Transformation and Deployment" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_0zjp1n8</bpmn:incoming>
        <bpmn:outgoing>Flow_0hrpg6q</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
def pollingUrl = execution.getVariable("transformation_framework_job_url");
println "Polling for successful transformation at: " + pollingUrl;

def transformationStatus = false;
def result = [];
while(transformationStatus != "deployed") {
   println "Waiting 10 seconds for next polling request to the Transformation Framework at URL: " + pollingUrl
   sleep(10000)
   def get = new URL(pollingUrl).openConnection();
   get.setRequestMethod("GET");
   get.setDoOutput(true);

   if(get.getResponseCode() != 200){
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received invalid status code during polling: " + get.getResponseCode());
   }
   def resultText = get.getInputStream().getText();
   def slurper = new JsonSlurper();
   def json = slurper.parseText(resultText);
   def workflow = json.get("workflow");
   transformationStatus = workflow.get("status");
   if(transformationStatus == "deployed"){
       def deployedProcessDefinition = workflow.get("deployedProcessDefinition");
       println "Resulting definition of deployed process: " + deployedProcessDefinition
       execution.setVariable("fragment_endpoint", deployedProcessDefinition.key);
   }
   if(transformationStatus == "failed"){
       throw new org.camunda.bpm.engine.delegate.BpmnError("Transformation of workflow failed!");
   }
}</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0zjp1n8" sourceRef="Activity_0syl63w" targetRef="Activity_0bxie4r" />
      <bpmn:exclusiveGateway id="Gateway_1rali66">
        <bpmn:incoming>Flow_0hrpg6q</bpmn:incoming>
        <bpmn:incoming>Flow_11frg26</bpmn:incoming>
        <bpmn:outgoing>Flow_1l9h03h</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_0hrpg6q" sourceRef="Activity_0bxie4r" targetRef="Gateway_1rali66" />
      <bpmn:sequenceFlow id="Flow_11frg26" name="yes" sourceRef="Gateway_1d9r8bt" targetRef="Gateway_1rali66">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("already_selected") == true &amp;&amp; already_selected == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:callActivity id="Activity_06t6uc3" name="Invoke Transformed Fragment" camunda:asyncBefore="true" calledElement="${fragment_endpoint}">
        <bpmn:extensionElements>
          <camunda:in variables="all" />
          <camunda:out variables="all" />
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1l9h03h</bpmn:incoming>
        <bpmn:outgoing>Flow_0z23bi4</bpmn:outgoing>
      </bpmn:callActivity>
      <bpmn:sequenceFlow id="Flow_1l9h03h" sourceRef="Gateway_1rali66" targetRef="Activity_06t6uc3" />
      <bpmn:endEvent id="Event_15deccs" name="Terminate Hardware Selection Subprocess">
        <bpmn:incoming>Flow_0z23bi4</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0z23bi4" sourceRef="Activity_06t6uc3" targetRef="Event_15deccs" />
    </bpmn:subProcess>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_070m5p1">
      <bpmndi:BPMNShape id="EndEvent_0pjq7fr_di" bpmnElement="EndEvent_0pjq7fr">
        <dc:Bounds x="3376" y="147" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="StartEvent_0ej6lwb_di" bpmnElement="StartEvent_0ej6lwb">
        <dc:Bounds x="0" y="147" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_06awxe9_di" bpmnElement="Task_1h88ddf">
        <dc:Bounds x="3226" y="125" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0vr629i" bpmnElement="Gateway_0wq36cd" isMarkerVisible="true">
        <dc:Bounds x="3126" y="140" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3121" y="197" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0pj22b3" bpmnElement="Gateway_0qaj4kt" isMarkerVisible="true">
        <dc:Bounds x="86" y="140" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0jhzmyb_di" bpmnElement="ResultEvaluationTask_0933y5e">
        <dc:Bounds x="1696" y="125" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0uoi2ii_di" bpmnElement="ParameterOptimizationTask_01m89mt">
        <dc:Bounds x="1846" y="0" width="1230" height="330" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1h5cozp_di" bpmnElement="Task_009hsrk">
        <dc:Bounds x="186" y="125" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0x0wng2_di" bpmnElement="Activity_1p2awjj">
        <dc:Bounds x="336" y="0" width="1310" height="330" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_134gyga_di" bpmnElement="SequenceFlow_134gyga">
        <di:waypoint x="3326" y="165" />
        <di:waypoint x="3376" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_17fnx68" bpmnElement="Flow_1m60wcg">
        <di:waypoint x="136" y="165" />
        <di:waypoint x="186" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0czrsh0_di" bpmnElement="Flow_0czrsh0">
        <di:waypoint x="3176" y="165" />
        <di:waypoint x="3226" y="165" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="3201" y="141" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_18kx5os_di" bpmnElement="Flow_18kx5os">
        <di:waypoint x="286" y="165" />
        <di:waypoint x="336" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1qkl8n3_di" bpmnElement="Flow_1qkl8n3">
        <di:waypoint x="36" y="165" />
        <di:waypoint x="86" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tljgkh_di" bpmnElement="Flow_0tljgkh">
        <di:waypoint x="3151" y="190" />
        <di:waypoint x="3101" y="365" />
        <di:waypoint x="2461" y="365" />
        <di:waypoint x="1821" y="365" />
        <di:waypoint x="1746" y="365" />
        <di:waypoint x="1671" y="365" />
        <di:waypoint x="991" y="365" />
        <di:waypoint x="311" y="365" />
        <di:waypoint x="236" y="365" />
        <di:waypoint x="161" y="365" />
        <di:waypoint x="111" y="190" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wlfysg_di" bpmnElement="Flow_0wlfysg">
        <di:waypoint x="3076" y="165" />
        <di:waypoint x="3126" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05sf6lt_di" bpmnElement="Flow_05sf6lt">
        <di:waypoint x="1796" y="165" />
        <di:waypoint x="1846" y="165" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11f62wp_di" bpmnElement="Flow_11f62wp">
        <di:waypoint x="1646" y="165" />
        <di:waypoint x="1696" y="165" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_19cgjqz">
    <bpmndi:BPMNPlane id="BPMNPlane_0lwuhrh" bpmnElement="ParameterOptimizationTask_01m89mt">
      <bpmndi:BPMNShape id="Event_04l46qq_di" bpmnElement="Event_04l46qq">
        <dc:Bounds x="1916" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1i7zth4_di" bpmnElement="Gateway_1i7zth4" isMarkerVisible="true">
        <dc:Bounds x="2002" y="50" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1988" y="26" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1kr3ron_di" bpmnElement="Gateway_1kr3ron" isMarkerVisible="true">
        <dc:Bounds x="2252" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1u5y1m4_di" bpmnElement="Event_1u5y1m4">
        <dc:Bounds x="2502" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_09mptza_di" bpmnElement="Activity_09mptza">
        <dc:Bounds x="2102" y="110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1jbhkv8_di" bpmnElement="Activity_1jbhkv8">
        <dc:Bounds x="2352" y="35" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0fhtong_di" bpmnElement="Flow_0fhtong">
        <di:waypoint x="1952" y="75" />
        <di:waypoint x="2002" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0lmmljd_di" bpmnElement="Flow_0lmmljd">
        <di:waypoint x="2052" y="75" />
        <di:waypoint x="2077" y="75" />
        <di:waypoint x="2152" y="75" />
        <di:waypoint x="2227" y="75" />
        <di:waypoint x="2252" y="75" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2189.5" y="51" width="14" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0jqhmaj_di" bpmnElement="Flow_0jqhmaj">
        <di:waypoint x="2027" y="100" />
        <di:waypoint x="2027" y="150" />
        <di:waypoint x="2102" y="150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2064.5" y="126" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1cfcslk_di" bpmnElement="Flow_1cfcslk">
        <di:waypoint x="2202" y="150" />
        <di:waypoint x="2277" y="150" />
        <di:waypoint x="2277" y="100" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_03ngcci_di" bpmnElement="Flow_03ngcci">
        <di:waypoint x="2302" y="75" />
        <di:waypoint x="2352" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_185dnvw_di" bpmnElement="Flow_185dnvw">
        <di:waypoint x="2452" y="75" />
        <di:waypoint x="2502" y="75" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_0mrni12">
    <bpmndi:BPMNPlane id="BPMNPlane_0em2t7t" bpmnElement="Activity_1p2awjj">
      <bpmndi:BPMNShape id="Event_1n6hipv_di" bpmnElement="Event_1n6hipv">
        <dc:Bounds x="406" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1d9r8bt_di" bpmnElement="Gateway_1d9r8bt" isMarkerVisible="true">
        <dc:Bounds x="492" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0go0afx_di" bpmnElement="Activity_0go0afx">
        <dc:Bounds x="592" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0samvsh_di" bpmnElement="Activity_0samvsh">
        <dc:Bounds x="742" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0az1znc_di" bpmnElement="Activity_0az1znc">
        <dc:Bounds x="892" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0syl63w_di" bpmnElement="Activity_0syl63w">
        <dc:Bounds x="1042" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0bxie4r_di" bpmnElement="Activity_0bxie4r">
        <dc:Bounds x="1192" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1rali66_di" bpmnElement="Gateway_1rali66" isMarkerVisible="true">
        <dc:Bounds x="1342" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_06t6uc3_di" bpmnElement="Activity_06t6uc3">
        <dc:Bounds x="1442" y="35" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_15deccs_di" bpmnElement="Event_15deccs">
        <dc:Bounds x="1592" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_09tw49y_di" bpmnElement="Flow_09tw49y">
        <di:waypoint x="442" y="75" />
        <di:waypoint x="492" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0lwge0j_di" bpmnElement="Flow_0lwge0j">
        <di:waypoint x="542" y="75" />
        <di:waypoint x="592" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1v4lyfl_di" bpmnElement="Flow_1v4lyfl">
        <di:waypoint x="692" y="75" />
        <di:waypoint x="742" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1jom0y5_di" bpmnElement="Flow_1jom0y5">
        <di:waypoint x="842" y="75" />
        <di:waypoint x="892" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tqyfjg_di" bpmnElement="Flow_0tqyfjg">
        <di:waypoint x="992" y="75" />
        <di:waypoint x="1042" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zjp1n8_di" bpmnElement="Flow_0zjp1n8">
        <di:waypoint x="1142" y="75" />
        <di:waypoint x="1192" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0hrpg6q_di" bpmnElement="Flow_0hrpg6q">
        <di:waypoint x="1292" y="75" />
        <di:waypoint x="1342" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11frg26_di" bpmnElement="Flow_11frg26">
        <di:waypoint x="517" y="100" />
        <di:waypoint x="567" y="150" />
        <di:waypoint x="642" y="150" />
        <di:waypoint x="717" y="150" />
        <di:waypoint x="792" y="150" />
        <di:waypoint x="867" y="150" />
        <di:waypoint x="942" y="150" />
        <di:waypoint x="1017" y="150" />
        <di:waypoint x="1092" y="150" />
        <di:waypoint x="1167" y="150" />
        <di:waypoint x="1242" y="150" />
        <di:waypoint x="1317" y="150" />
        <di:waypoint x="1367" y="100" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1l9h03h_di" bpmnElement="Flow_1l9h03h">
        <di:waypoint x="1392" y="75" />
        <di:waypoint x="1442" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0z23bi4_di" bpmnElement="Flow_0z23bi4">
        <di:waypoint x="1542" y="75" />
        <di:waypoint x="1592" y="75" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
