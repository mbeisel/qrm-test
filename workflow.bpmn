<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:opentosca="https://github.com/UST-QuAntiL/OpenTOSCA" id="Definitions_0wzkc0b" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20230126">
  <bpmn:process id="Process_070m5p1" isExecutable="true">
    <bpmn:endEvent id="EndEvent_0pjq7fr">
      <bpmn:incoming>SequenceFlow_134gyga</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:startEvent id="StartEvent_0ej6lwb">
      <bpmn:extensionElements>
        <camunda:formData>
          <camunda:formField id="adjMatrix" label="Array containing adj_matrix" type="string" defaultValue="[[0,3,3,6,9,1],[3,0,4,4,-8,4],[3,4,0,3,-7,1],[6,4,3,0,-7,6],[9,-8,-7,-7,0,-5],[1,4,1,6,-5,0]]" />
          <camunda:formField id="quantum_token_ibmq" label="IBMQ Token" type="string" />
          <camunda:formField id="hub" label="IBMQ Hub" type="string" defaultValue="ibm-q" />
          <camunda:formField id="group" label="IBMQ Group" type="string" defaultValue="open" />
          <camunda:formField id="project" label="IBMQ Project" type="string" defaultValue="main" />
          <camunda:formField id="ibmqUrl" label="IBMQ URL" type="string" defaultValue="https://auth.quantum-computing.ibm.com/api" />
          <camunda:formField id="qpu" label="IBMQ Backend name" type="string" defaultValue="simulator" />
          <camunda:formField id="noiseModel" label="Noise Model" type="string" />
          <camunda:formField id="onlyMeasurementErrors" label="Noise Model contains only measurement errors" type="boolean" />
          <camunda:formField id="gammas" label="gammas" type="string" defaultValue="[1]" />
          <camunda:formField id="betas" label="betas" type="string" defaultValue="[1]" />
          <camunda:formField id="HypervisorEndpoint" label="HypervisorEndpoint" type="string" defaultValue="https://idm02.bw-cloud.org:5000/v3" />
          <camunda:formField id="HypervisorApplicationID" label="HypervisorApplicationID" type="string" defaultValue="c4393a03db254ff3854ac764d551fe13" />
          <camunda:formField id="HypervisorApplicationSecret" label="HypervisorApplicationSecret" type="string" defaultValue="" />
          <camunda:formField id="VMPrivateKey" label="VMPrivateKey" type="string" defaultValue="-----BEGIN RSA PRIVATE KEY-----&#10;&#10;MIIEpAIBAAKCAQEAvTU25toSTIx52zedIjCYy0J6GcvVmVmJ2ngLj4IOx6NZd6NQ&#10;&#10;idWGB6OeqVCS8Hw35MKWK+TSUTolZdKufQqG0r13Vw++c4DhF/RyROEH640jAeVz&#10;&#10;QWXQvRQIpQqflbmNtMkFwTI7wUgpPhyZkaKqePpOnZAKgblIYQWOduu6bKkemqvE&#10;&#10;JsKESk5yJCUL9EcnSnjoM6SrgKD6a97AGM0v0+SdR6VWXQGbdj5idLYxzkO+HB0O&#10;&#10;wPOzOQ+fH4e52zEyVrsx6YjodP5PuFOz75Yjoy9N/H4RkEfwPBclttjJcWbic8/A&#10;&#10;3BiIf7nDyhjh5idF18LaVf4yZNb3Fh9WzoipzQIDAQABAoIBAFa4iz9n+Dcps7hs&#10;&#10;VxMSnxWalIg6St6MkYiWuQW/oLKUBi+1pPZn7ZSWw+Pq0E51QNES9u2LZXJhaj6v&#10;&#10;P9aD+qOgv5Ah4TLjgUgPfEhhs9WczMzTs+3nkrL2+bdblSV09KRF9uND+Otv/adA&#10;&#10;SIrdubDVWS8SlB49JBWEDHYpOTsPxrXp6ZhmwKluYVRC2gc6wbjPpO6CdGfoGMdm&#10;&#10;j1wrjpm43GRaoGi8dN3VB/TROJeXxwu8fh+lsfSQlVG/04iZg1MUcVSn6wY+d+Zv&#10;&#10;0J+AqPI/qstrCs4MO8oWYGIVz1G/+ll9a3Fg1CaB9mBmZ9R7LUKCIYsl/5U70LRZ&#10;&#10;trH9OMECgYEA5/wETvomTO38+VeWyfR+MqRcruxzJ4W4BWy5NMryASGGwBln8XhF&#10;&#10;OU0ioAjMuIU2rdiYtP6vKIu6TxWikix2i8hUv5XmrCj5IbsAnUqJLEq5TnMYscuG&#10;&#10;AlF7vPNMhLqsn6rsD6M8uMYwI8l9BHLnDiJo8y7hVAnA02+t1uZS9AkCgYEA0MuL&#10;&#10;qU/+Kk1yMSLWGa/WPiJFoOBzcCdTPoiNeoItP3VMeh8Pnx/6KH6f3FB1mztyJwXn&#10;&#10;KYDIN+MOA5sO6+s67rhVQvuwArv+YJ9s+IyHZaurda8VhBlyF3PaRHiQoxQ+K///&#10;&#10;hNjTCYe/etuqXlIJ2JUfx16vAb94ViLiyhKeYKUCgYEArFUmKjlgLHP7Iouzw7Ex&#10;&#10;8pLxGy0h2nFWpAkBiLtejgKG5Lu64MHUwt2PZE1FL6oeVYT65DHyku9B5zAORgJr&#10;&#10;yil285/67Ve+wxT1PuO5BUM5Z5LO/H1RvvUjM9mVtWArjq1dkbxVBnqMFnm+uohV&#10;&#10;JsXfKxBfaZuZODjVbjhJ1WkCgYAfc4nGJ1aR6LiazjSSCfqrwV3brfO1oTbY5Jjr&#10;&#10;K1DFjlXGz4b64UY9c1WBSl1s1LeNSUZY6h0+zeT+hgzpXLWz3/B39pG817SpuVog&#10;&#10;1opOtl1NjOIg0/Rrs/fc+IxRBGuZFSbYTBD+DoS5bP1s187D4TK4RXr3OHBYCUlA&#10;&#10;Ry20QQKBgQCdRgHhQWsnuhj1cdeY3aJEhXrS8c3k2UapWazNkOODzoqTbeRT8QKt&#10;&#10;69l/c1I1D4j3vrf/3Mi5hmba+W5BHwAdv4fnEZC7Afi5k3AZDmFMAMG0rJ43SlGS&#10;&#10;IB5eGLUuJu32X9If+HsRahFeJZJPdw9UKU9lPmENhYLaBlkxdQ6nhw==&#10;&#10;-----END RSA PRIVATE KEY-----" />
          <camunda:formField id="VMKeyPairName" label="VMKeyPairName" type="string" defaultValue="Orchestration2" />
          <camunda:formField id="HypervisorRegion" label="HypervisorRegion" type="string" defaultValue="Mannheim" />
          <camunda:formField id="VMNetworks" label="VM Network Ids" type="string" defaultValue="c4eafee4-e84d-45ca-92a6-238302b75083" />
        </camunda:formData>
      </bpmn:extensionElements>
      <bpmn:outgoing>Flow_1qkl8n3</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="SequenceFlow_134gyga" sourceRef="Task_1h88ddf" targetRef="EndEvent_0pjq7fr" />
    <bpmn:userTask id="Task_1h88ddf" name="Analyze Results">
      <bpmn:extensionElements>
        <camunda:formData>
          <camunda:formField id="plotUrl" label="Result Image URL" type="string">
            <camunda:properties>
              <camunda:property id="Property_39pgd42" />
            </camunda:properties>
            <camunda:validation>
              <camunda:constraint name="readonly" />
            </camunda:validation>
          </camunda:formField>
        </camunda:formData>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0czrsh0</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_134gyga</bpmn:outgoing>
    </bpmn:userTask>
    <bpmn:exclusiveGateway id="Gateway_0wq36cd" name="Converged?">
      <bpmn:incoming>Flow_0wlfysg</bpmn:incoming>
      <bpmn:outgoing>Flow_0czrsh0</bpmn:outgoing>
      <bpmn:outgoing>Flow_0tljgkh</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:exclusiveGateway id="Gateway_0qaj4kt">
      <bpmn:incoming>Flow_1qkl8n3</bpmn:incoming>
      <bpmn:incoming>Flow_0tljgkh</bpmn:incoming>
      <bpmn:outgoing>Flow_1m60wcg</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_1m60wcg" sourceRef="Gateway_0qaj4kt" targetRef="Task_009hsrk" />
    <bpmn:sequenceFlow id="Flow_0czrsh0" name="Yes" sourceRef="Gateway_0wq36cd" targetRef="Task_1h88ddf">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('converged')!= null &amp;&amp; execution.getVariable('converged') != 'false'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_18kx5os" sourceRef="Task_009hsrk" targetRef="Activity_1p2awjj" />
    <bpmn:sequenceFlow id="Flow_1qkl8n3" sourceRef="StartEvent_0ej6lwb" targetRef="Gateway_0qaj4kt" />
    <bpmn:sequenceFlow id="Flow_0tljgkh" sourceRef="Gateway_0wq36cd" targetRef="Gateway_0qaj4kt">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('converged')== null || execution.getVariable('converged') == 'false'}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0wlfysg" sourceRef="ParameterOptimizationTask_01m89mt" targetRef="Gateway_0wq36cd" />
    <bpmn:sequenceFlow id="Flow_05sf6lt" sourceRef="ResultEvaluationTask_0933y5e" targetRef="ParameterOptimizationTask_01m89mt" />
    <bpmn:sequenceFlow id="Flow_11f62wp" sourceRef="Activity_1p2awjj" targetRef="ResultEvaluationTask_0933y5e" />
    <bpmn:subProcess id="ParameterOptimizationTask_01m89mt" name="Optimize QAOA Parameters">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="optimizer">cobyla</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_05sf6lt</bpmn:incoming>
      <bpmn:outgoing>Flow_0wlfysg</bpmn:outgoing>
      <bpmn:startEvent id="Event_149uz5z">
        <bpmn:outgoing>Flow_15onlx2</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="Gateway_17hxwps" name="Is first Iteration?">
        <bpmn:incoming>Flow_15onlx2</bpmn:incoming>
        <bpmn:outgoing>Flow_1hcu1wv</bpmn:outgoing>
        <bpmn:outgoing>Flow_0l8tpv2</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:exclusiveGateway id="Gateway_1rp0h2h">
        <bpmn:incoming>Flow_1hcu1wv</bpmn:incoming>
        <bpmn:incoming>Flow_1xljtwd</bpmn:incoming>
        <bpmn:outgoing>Flow_1wfxaf5</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:endEvent id="Event_0us00q7">
        <bpmn:incoming>Flow_0rrb07z</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:serviceTask id="Activity_0whr1sl" name="Optimizer Parameters" camunda:asyncAfter="true" camunda:exclusive="false" camunda:type="external" camunda:topic="123456">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:outputParameter name="iterations">
              <camunda:script scriptFormat="groovy">def iterations = execution.getVariable("iterations");
							iterations = iterations + 1;
							return iterations;
					</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1wfxaf5</bpmn:incoming>
        <bpmn:outgoing>Flow_0rrb07z</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_15onlx2" sourceRef="Event_149uz5z" targetRef="Gateway_17hxwps" />
      <bpmn:sequenceFlow id="Flow_1hcu1wv" name="No" sourceRef="Gateway_17hxwps" targetRef="Gateway_1rp0h2h">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('iterations')!= null &amp;&amp; execution.getVariable('iterations') &gt;= 1}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0l8tpv2" name="Yes" sourceRef="Gateway_17hxwps" targetRef="Activity_0v3eoix">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${ execution.getVariable('iterations')== null || execution.getVariable('iterations') &lt; 1}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_1xljtwd" sourceRef="Activity_0v3eoix" targetRef="Gateway_1rp0h2h" />
      <bpmn:sequenceFlow id="Flow_1wfxaf5" sourceRef="Gateway_1rp0h2h" targetRef="Activity_0whr1sl" />
      <bpmn:sequenceFlow id="Flow_0rrb07z" sourceRef="Activity_0whr1sl" targetRef="Event_0us00q7" />
      <bpmn:subProcess id="Activity_0v3eoix" name="Initialize Optimizer" camunda:asyncAfter="true" labels="" children="" width="100" height="80" type="bpmn:ServiceTask" collapsed="false" hidden="false" x="1952" y="110" isFrame="false" order="[object Object]" opentosca:onDemandDeployment="true" opentosca:deploymentModelUrl="http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaOptimizationService_INCOMPLETE_w1/?csar">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="dedicatedHosting">undefined</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0l8tpv2</bpmn:incoming>
        <bpmn:outgoing>Flow_1xljtwd</bpmn:outgoing>
        <bpmn:startEvent id="Event_0oazket">
          <bpmn:outgoing>Flow_14lir3m</bpmn:outgoing>
        </bpmn:startEvent>
        <bpmn:scriptTask id="Activity_1rusmlz" name="Adapt Model" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
          <bpmn:incoming>Flow_14lir3m</bpmn:incoming>
          <bpmn:outgoing>Flow_1xfmz0x</bpmn:outgoing>
          <bpmn:script>
import groovy.json.*
def url = "http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaOptimizationService_INCOMPLETE_w1/topologytemplate/completemodel"
def blacklist = ["{http://opentosca.org/nodetypes}OpenStack_22-Victoria-w1"];
def slurper = new JsonSlurper();
def policies = slurper.parseText("{\"opentosca:LocationPolicy\":\"EU\"}");

def message = JsonOutput.toJson("policies": policies, "blacklist": blacklist);

try {
   def post = new URL(url).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");

   OutputStreamWriter wr = new OutputStreamWriter(post.getOutputStream());
   println message;
   wr.write(message.toString());
   wr.flush();

   def status = post.getResponseCode();
   println status;
   if(status.toString().startsWith("2")){
       println post;
       println post.getInputStream();
       def location = post.getHeaderFields()['Location'][0];
       def saveVarName = "completeModelUrl_" + "Activity_0v3eoix";
       execution.setVariable(saveVarName, location);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while completing Deployment Model!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + "http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaOptimizationService_INCOMPLETE_w1/topologytemplate/completemodel");
};
</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_14lir3m" sourceRef="Event_0oazket" targetRef="Activity_1rusmlz" />
        <bpmn:exclusiveGateway id="Gateway_1x53cy0" name="Dedidcated Policy?">
          <bpmn:incoming>Flow_1xfmz0x</bpmn:incoming>
          <bpmn:outgoing>Flow_18iosmk</bpmn:outgoing>
          <bpmn:outgoing>Flow_07mgdgq</bpmn:outgoing>
        </bpmn:exclusiveGateway>
        <bpmn:sequenceFlow id="Flow_1xfmz0x" sourceRef="Activity_1rusmlz" targetRef="Gateway_1x53cy0" />
        <bpmn:scriptTask id="Activity_1q8kkh2" name="Check For Equivalent Deployment Model" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
          <bpmn:incoming>Flow_18iosmk</bpmn:incoming>
          <bpmn:outgoing>Flow_05e0oi3</bpmn:outgoing>
          <bpmn:script>
import groovy.json.*
def url = execution.getVariable("completeModelUrl_" + "Activity_0v3eoix");
url = url + "topologytemplate/checkforequivalentcsars?includeSelf=true"

try {
   def post = new URL(url).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");

   post.getOutputStream().write();
   
   def status = post.getResponseCode();
   println status;
   if(status.toString().startsWith("2")){
       println post.getInputStream();
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       def saveVarName = "equivalentCSARs_" + "Activity_0v3eoix";
       execution.setVariable(saveVarName, json);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while completing Deployment Model!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + url);
};
</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_18iosmk" name="no" sourceRef="Gateway_1x53cy0" targetRef="Activity_1q8kkh2">
          <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("dedicatedHosting") == false || dedicatedHosting == false}</bpmn:conditionExpression>
        </bpmn:sequenceFlow>
        <bpmn:scriptTask id="Activity_1164rcl" name="Check Container For Available Instance" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
          <bpmn:incoming>Flow_05e0oi3</bpmn:incoming>
          <bpmn:outgoing>Flow_1sqn2w8</bpmn:outgoing>
          <bpmn:script>
import groovy.json.*
def containerUrl = "http://192.168.178.107:1337/csars";
def equivalentCSARs = execution.getVariable("equivalentCSARs_" + "Activity_0v3eoix");

try {
   for (String equivalentCSAR : equivalentCSARs ){
       println "Checking availability for CSAR with URL: " + equivalentCSAR;
       def values = equivalentCSAR.split('/');
       def csarName = values[values.length - 1];
       println "Checking availability for CSAR with name: " + csarName;

       def csarUrl = containerUrl + "/" + csarName + ".csar";
       println "Checking for ServiceTemaplates using URL: " + csarUrl;

       def get = new URL(csarUrl).openConnection();
       get.setRequestMethod("GET");
       get.setDoOutput(true);
       get.setRequestProperty("accept", "application/json");
       def status = get.getResponseCode();
       println "Status code for ServiceTemplate retrieval: " + status;
       if(status != 200){
          println "CSAR not found. Skipping...";
          continue;
       }
       def resultText = get.getInputStream().getText();
       def json = new JsonSlurper().parseText(resultText);
       def serviceTemplateLink = json.get("_links").get("servicetemplate").get("href") + "/instances";
       println "Retrieved link to ServiceTemplate: " + serviceTemplateLink;

       get = new URL(serviceTemplateLink).openConnection();
       get.setRequestMethod("GET");
       get.setDoOutput(true);
       get.setRequestProperty("accept", "application/json");
       status = get.getResponseCode();
       println "Status code for instance retrieval: " + status;
       if(status != 200){
          println "Unable to retrieve instances. Skipping...";
          continue;
       }
       resultText = get.getInputStream().getText();
       json = new JsonSlurper().parseText(resultText);
       def serviceTemplateInstances = json.get("service_template_instances");
       println serviceTemplateInstances;
       
       for (Object serviceTemplateInstance: serviceTemplateInstances){
          println "Checking instance with ID: " + serviceTemplateInstance.get("id");
          if(serviceTemplateInstance.get("state") != "CREATED"){
             println "Instance has invalid state. Skipping: " + serviceTemplateInstance.get("state");
             continue;
          }

          println "Found instance with state CREATED. Extracting selfServiceUrl...";
          def instancesLink = serviceTemplateInstance.get("_links").get("self").get("href");
          println "Retrieving instance information from URL: " + instancesLink;

          get = new URL(instancesLink).openConnection();
          get.setRequestMethod("GET");
          get.setDoOutput(true);
          get.setRequestProperty("accept", "application/json");
          status = get.getResponseCode();
          if(status != 200){
             println "Unable to retrieve instance information. Skipping...";
             continue;
          }

          resultText = get.getInputStream().getText();
          json = new JsonSlurper().parseText(resultText);
          def buildPlanLink = json .get("_links").get("build_plan_instance").get("href");
          println "Retrieved build plan URL: " + buildPlanLink;

          get = new URL(buildPlanLink).openConnection();
          get.setRequestMethod("GET");
          get.setDoOutput(true);
          get.setRequestProperty("accept", "application/json");
          status = get.getResponseCode();
          if(status != 200){
             println "Unable to retrieve build plan information. Skipping...";
             continue;
          }

          resultText = get.getInputStream().getText();
          json = new JsonSlurper().parseText(resultText);
          def outputs = json.get("outputs");
          println outputs;

          def selfserviceApplicationUrlEntry = outputs.findAll { it.name.equalsIgnoreCase("selfserviceApplicationUrl") };
          if(selfserviceApplicationUrlEntry .size() &lt; 1) {
             println "Unable to retrieve selfserviceApplicationUrl. Skipping...";
             continue;
          }
          def selfserviceApplicationUrl = selfserviceApplicationUrlEntry[0].value;
          println "Retrieved selfserviceApplicationUrl: " + selfserviceApplicationUrl;
          execution.setVariable("instanceAvailable", "true");
          execution.setVariable("Activity_0v3eoix" + "_selfserviceApplicationUrl", selfserviceApplicationUrl);
          return;
      }
   }

   println "Unable to retrieve suitable instances!";
   execution.setVariable("instanceAvailable", "false");
} catch(Exception e) {
   println "Exception while searching for available instances: " + e;
   execution.setVariable("instanceAvailable", "false");
};
</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_05e0oi3" sourceRef="Activity_1q8kkh2" targetRef="Activity_1164rcl" />
        <bpmn:exclusiveGateway id="Gateway_1u2f9aq" name="Instance Available?">
          <bpmn:incoming>Flow_1sqn2w8</bpmn:incoming>
          <bpmn:outgoing>Flow_1t151ir</bpmn:outgoing>
          <bpmn:outgoing>Flow_1dx4vzw</bpmn:outgoing>
        </bpmn:exclusiveGateway>
        <bpmn:sequenceFlow id="Flow_1sqn2w8" sourceRef="Activity_1164rcl" targetRef="Gateway_1u2f9aq" />
        <bpmn:exclusiveGateway id="Gateway_0qpnik5">
          <bpmn:incoming>Flow_1t151ir</bpmn:incoming>
          <bpmn:incoming>Flow_07mgdgq</bpmn:incoming>
          <bpmn:outgoing>Flow_1tzgxte</bpmn:outgoing>
        </bpmn:exclusiveGateway>
        <bpmn:sequenceFlow id="Flow_1t151ir" name="no" sourceRef="Gateway_1u2f9aq" targetRef="Gateway_0qpnik5">
          <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("instanceAvailable") == false || instanceAvailable == false}</bpmn:conditionExpression>
        </bpmn:sequenceFlow>
        <bpmn:sequenceFlow id="Flow_07mgdgq" name="yes" sourceRef="Gateway_1x53cy0" targetRef="Gateway_0qpnik5">
          <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("dedicatedHosting") == true &amp;&amp; dedicatedHosting == true}</bpmn:conditionExpression>
        </bpmn:sequenceFlow>
        <bpmn:scriptTask id="Activity_0e24lbn" name="Upload to Container" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="javascript">
          <bpmn:incoming>Flow_1tzgxte</bpmn:incoming>
          <bpmn:outgoing>Flow_0kibfxr</bpmn:outgoing>
          <bpmn:script>
var inputParams = {"AWSAccessKey":"123","AWSRegion":"123","AWSSecretKey":"123"};
var urlParts = execution.getVariable("completeModelUrl_" + "Activity_0v3eoix").split("/");
var reconstructedVMs= {"EC2-w1":{"name":"EC2-w1","qName":"{http://opentosca.org/nodetypes}EC2-w1","requiredAttributes":{"VMKeyPairName":"123","VMOpenPorts":"123","VMPrivateKey":"123","VMType":"123"}},"OpenStack_22-Victoria-w1":{"name":"OpenStack_22-Victoria-w1","qName":"{http://opentosca.org/nodetypes}OpenStack_22-Victoria-w1","requiredAttributes":{"VMKeyPairName":"","VMNetworks":"","VMOpenPorts":"","VMPrivateKey":"","VMType":""}}};


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}

var createCsarResponse = fetch('POST', "http://192.168.178.107:1337/csars", JSON.stringify({
    enrich: 'false',
    name: urlParts[urlParts.length - 1] + ".csar",
    url: execution.getVariable("completeModelUrl_" + "Activity_0v3eoix") + "?csar"
}))

var deployedTopology = JSON.parse(fetch('GET', execution.getVariable("completeModelUrl_" + "Activity_0v3eoix") + "topologytemplate"));

for (const [key, value] of Object.entries(deployedTopology.nodeTemplates)) {
  for (const [constructKey, constructValue] of Object.entries(reconstructedVMs)) {
    if (
      constructValue.name.includes(value.name) &amp;&amp;
      !value.name.includes("VM")
    ) {
      for (const [propertyName, propertyValue] of Object.entries(constructValue.requiredAttributes)) {
        inputParams[propertyName] = propertyValue;
      }
    }
  }
}
java.lang.System.out.println("Input parameters after update: " + JSON.stringify(inputParams));

var serviceTemplates = JSON.parse(fetch('GET', "http://192.168.178.107:1337/csars" + "/" + urlParts[urlParts.length - 1] + ".csar/servicetemplates"))
var buildPlansUrl = serviceTemplates.service_templates[0]._links.self.href + '/buildplans'
var buildPlans = JSON.parse(fetch('GET', buildPlansUrl))
var buildPlanUrl = buildPlans.plans[0]._links.self.href
var inputParameters = JSON.parse(fetch('GET', buildPlanUrl)).input_parameters
for(var i = 0; i &lt; inputParameters.length; i++) {
    if(inputParameters[i].name === "camundaEndpoint") {
        inputParameters[i].value = "http://192.168.178.107:8090/engine-rest"
    } else if(inputParameters[i].name === "camundaTopic") {
        inputParameters[i].value = "kq8l3qIg8YL2"
    } else {
        inputParameters[i].value = inputParams[inputParameters[i].name];
    }
}

var createInstanceResponse = fetch('POST', buildPlanUrl + "/instances", JSON.stringify(inputParameters))
execution.setVariable("Activity_0v3eoix" + "_deploymentBuildPlanInstanceUrl", buildPlanUrl + "/instances/" + createInstanceResponse);</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_1tzgxte" sourceRef="Gateway_0qpnik5" targetRef="Activity_0e24lbn" />
        <bpmn:scriptTask id="Activity_0iy6hbn" name="Deploy Service" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="javascript">
          <bpmn:incoming>Flow_0kibfxr</bpmn:incoming>
          <bpmn:outgoing>Flow_1icz77l</bpmn:outgoing>
          <bpmn:script>


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}
var buildPlanInstanceUrl = execution.getVariable("Activity_0v3eoix" + "_deploymentBuildPlanInstanceUrl");
var instanceUrl;
for(var i = 0; i &lt; 20; i++) {
    try {
        instanceUrl = JSON.parse(fetch('GET', buildPlanInstanceUrl))._links.service_template_instance.href; 
        if (instanceUrl) break;
     } catch (e) {
     }
     java.lang.Thread.sleep(10000);
}

console.log("InstanceUrl: " + instanceUrl);

var buildPlanUrl = "";
for(var i = 0; i &lt; 50; i++) {
    try {
        java.lang.System.out.println("Iteration: " + i);
        var createInstanceResponse = fetch('GET', instanceUrl);
        var instance = JSON.parse(createInstanceResponse);
        console.log("Instance state: " + instance.state);
        buildPlanUrl = instance._links.build_plan_instance.href;
        if (instance &amp;&amp; instance.state === "CREATED") {
            break;
        }
     } catch (e) {
        java.lang.System.out.println("Error while checking instance state: " + e);
     }
     java.lang.Thread.sleep(30000);
}

console.log("Retrieving selfServiceApplicationUrl from build plan output from URL: ", buildPlanUrl);
var buildPlanResult = JSON.parse(fetch('GET', buildPlanUrl));
console.log("Build plan result: ", buildPlanResult);
var buildPlanOutputs = buildPlanResult.outputs;
console.log("Outputs: ", buildPlanOutputs.toString());
var selfserviceApplicationUrl = buildPlanOutputs.filter((output) =&gt; output.name === "selfserviceApplicationUrl");
console.log("SelfServiceApplicationUrl: " + selfserviceApplicationUrl[0].value);
 
execution.setVariable("Activity_0v3eoix" + "_selfserviceApplicationUrl", selfserviceApplicationUrl[0].value);
java.lang.Thread.sleep(12000);
</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_0kibfxr" sourceRef="Activity_0e24lbn" targetRef="Activity_0iy6hbn" />
        <bpmn:exclusiveGateway id="Gateway_1ccmm87">
          <bpmn:incoming>Flow_1icz77l</bpmn:incoming>
          <bpmn:incoming>Flow_1dx4vzw</bpmn:incoming>
          <bpmn:outgoing>Flow_133tjf2</bpmn:outgoing>
        </bpmn:exclusiveGateway>
        <bpmn:sequenceFlow id="Flow_1icz77l" sourceRef="Activity_0iy6hbn" targetRef="Gateway_1ccmm87" />
        <bpmn:sequenceFlow id="Flow_1dx4vzw" name="yes" sourceRef="Gateway_1u2f9aq" targetRef="Gateway_1ccmm87">
          <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("instanceAvailable") == true &amp;&amp; instanceAvailable == true}</bpmn:conditionExpression>
        </bpmn:sequenceFlow>
        <bpmn:serviceTask id="Activity_09drjq8" name="Invoke Service">
          <bpmn:extensionElements>
            <camunda:connector>
              <camunda:inputOutput>
                <camunda:inputParameter name="method">POST</camunda:inputParameter>
                <camunda:inputParameter name="headers">
                  <camunda:map>
                    <camunda:entry key="Accept">application/json</camunda:entry>
                    <camunda:entry key="Content-Type">application/json</camunda:entry>
                  </camunda:map>
                </camunda:inputParameter>
                <camunda:inputParameter name="url">${Activity_0v3eoix_selfserviceApplicationUrl.concat("/optimization-service")}</camunda:inputParameter>
                <camunda:inputParameter name="payload">
                  <camunda:script scriptFormat="groovy">
			    import groovy.json.JsonBuilder
			    def pollingEndpoint = execution.getVariable("CAMUNDA_ENDPOINT")
                def optimizer = execution.getVariable("optimizer");
                def gammas = execution.getVariable("gammas");
                def betas = execution.getVariable("betas");
                def initialParameters = betas + gammas;
                execution.setVariable("iterations", 0);

                def topic = "123456"
                execution.setVariable("optimizationTopic", topic)

                def request = [:];
                request.put("endpoint", pollingEndpoint);
                request.put("topic", topic);
                request.put("optimizer", optimizer);
                request.put("initialParameters", initialParameters);
                requeststring = new JsonBuilder(request).toPrettyString();
                return requeststring;
                </camunda:script>
                </camunda:inputParameter>
                <camunda:outputParameter name="iterations">
                  <camunda:script scriptFormat="groovy">
                def iterations = connector.getVariable("iterations");
                iterations = iterations + 1;
                return iterations;
                </camunda:script>
                </camunda:outputParameter>
                <camunda:outputParameter name="converged">
                  <camunda:script scriptFormat="groovy">return "false";</camunda:script>
                </camunda:outputParameter>
              </camunda:inputOutput>
              <camunda:connectorId>http-connector</camunda:connectorId>
            </camunda:connector>
          </bpmn:extensionElements>
          <bpmn:incoming>Flow_133tjf2</bpmn:incoming>
          <bpmn:outgoing>Flow_0rax3n4</bpmn:outgoing>
        </bpmn:serviceTask>
        <bpmn:sequenceFlow id="Flow_133tjf2" sourceRef="Gateway_1ccmm87" targetRef="Activity_09drjq8" />
        <bpmn:endEvent id="Event_1bjtu4k">
          <bpmn:incoming>Flow_0rax3n4</bpmn:incoming>
        </bpmn:endEvent>
        <bpmn:sequenceFlow id="Flow_0rax3n4" sourceRef="Activity_09drjq8" targetRef="Event_1bjtu4k" />
      </bpmn:subProcess>
    </bpmn:subProcess>
    <bpmn:subProcess id="Activity_1p2awjj" name="Select Hardware">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="circuitLanguage">openqasm</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_18kx5os</bpmn:incoming>
      <bpmn:outgoing>Flow_11f62wp</bpmn:outgoing>
      <bpmn:startEvent id="Event_1ax0239" name="Start Hardware Selection Subprocess">
        <bpmn:outgoing>Flow_1lv7348</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:exclusiveGateway id="Gateway_13hd5iv" name="Hardware already selected?">
        <bpmn:incoming>Flow_1lv7348</bpmn:incoming>
        <bpmn:outgoing>Flow_0v96nee</bpmn:outgoing>
        <bpmn:outgoing>Flow_0quhsw9</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_1lv7348" sourceRef="Event_1ax0239" targetRef="Gateway_13hd5iv" />
      <bpmn:scriptTask id="Activity_1bwbglt" name="Invoke NISQ Analyzer" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="camunda_endpoint">http://192.168.178.107:8090/engine-rest</camunda:inputParameter>
            <camunda:inputParameter name="nisq_analyzer_endpoint_qpu_selection">http://192.168.178.107:8098/nisq-analyzer/qpu-selection</camunda:inputParameter>
            <camunda:inputParameter name="providers">ibmq</camunda:inputParameter>
            <camunda:inputParameter name="simulators_allowed">true</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0v96nee</bpmn:incoming>
        <bpmn:outgoing>Flow_1g474pa</bpmn:outgoing>
        <bpmn:script>import groovy.json.*

def nisqAnalyzerEndpoint = execution.getVariable("nisq_analyzer_endpoint_qpu_selection");
def circuitLanguage = execution.getVariable("circuit_language");
if (circuitLanguage == null){
    circuitLanguage = execution.getVariable("circuitLanguage");
}

def quantumCircuit = execution.getVariable("quantum_circuit")
if (quantumCircuit == null){
    quantumCircuit = execution.getVariable("circuit");
}

def circuitString = null;
def circuitUrl = null;
if (quantumCircuit instanceof java.util.ArrayList){
    circuitString = quantumCircuit[0];
} else if (quantumCircuit instanceof String){
    circuitString = quantumCircuit;
} else {
    circuitUrl = execution.getVariable("camunda_endpoint");
    circuitUrl = circuitUrl.endsWith("/") ? circuitUrl : circuitUrl + "/";
    circuitUrl += "process-instance/" + execution.getProcessInstanceId() + "/variables/circuitString/data";
}

if(nisqAnalyzerEndpoint == null || circuitLanguage == null || quantumCircuit == null){
   throw new org.camunda.bpm.engine.delegate.BpmnError("Nisq Analyzer endpoint, quantum circuit, and circuit language must be set!");
}

def simulatorsAllowed = execution.getVariable("simulators_allowed");
if(simulatorsAllowed == null){
   simulatorsAllowed = "false";
}

def allowedProvidersList = [];
if(execution.getVariable("providers") != null){
   allowedProvidersList = execution.getVariable("providers").split(",");
}

def tokens = [:];
for (Object item : execution.getVariables().entrySet() ){
   def key = item.getKey();
   println key;
   if(key.startsWith("quantum_token_")) {

       def provider = key.split("_")[2];
       tokens.putAt(provider, item.getValue());
   }
}


def message = JsonOutput.toJson(["circuitUrl": circuitUrl, "simulatorsAllowed": simulatorsAllowed, "circuitLanguage": circuitLanguage, "tokens": tokens, "allowedProviders": allowedProvidersList, "compilers": ["qiskit"], "qasmCode": circuitString]);
println "Sending message: " + message;
def qpuSelectionUrl= nisq_analyzer_endpoint_qpu_selection

try {
   def post = new URL(qpuSelectionUrl).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");
   post.getOutputStream().write(message.getBytes("UTF-8"));

   def status = post.getResponseCode();
   if(status == 200){
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       def jobUrl = json.get("_links").get("self").get("href");
       int userIdRemoval = jobUrl.indexOf("{?userId}");
       if (userIdRemoval != -1){
          jobUrl = jobUrl.substring(0, userIdRemoval)
       }
       println "NISQ Analyzer invocation resulted in the following job URL: " + jobUrl;
       execution.setVariable("nisq_analyzer_job_url", jobUrl);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while invoking NISQ Analyzer!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + nisqAnalyzerEndpoint);
};</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0v96nee" name="no" sourceRef="Gateway_13hd5iv" targetRef="Activity_1bwbglt">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("already_selected") == false || already_selected == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_1cj2xig" name="Selecting based on Queue Size" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_1g474pa</bpmn:incoming>
        <bpmn:outgoing>Flow_1nuoeai</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
import org.camunda.bpm.engine.variable.value.FileValue
import org.camunda.bpm.engine.variable.Variables

def pollingUrl = execution.getVariable("nisq_analyzer_job_url");
println "Polling for NISQ Analyzer results at URL: " + pollingUrl
def ready = false;
def resultList = [];
while(ready == false) {
   println "Waiting 10 seconds for next polling request to the NISQ Analyzer at URL: " + pollingUrl
   sleep(10000)
   def get = new URL(pollingUrl).openConnection();
   get.setRequestMethod("GET");
   get.setDoOutput(true);

   def status = get.getResponseCode();
   if(status != 200){
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received invalid status code during polling: " + status);
   }
   def resultText = get.getInputStream().getText();
   def slurper = new JsonSlurper();
   def json = slurper.parseText(resultText);
   ready = json.get("ready");
   if(ready == true){
       resultList = json.get("qpuSelectionResultList");
   }
}

println "NISQ Analyzer job changed status to ready!"
println "Received " + resultList.size + " possible QPUs for the execution...";

if(resultList.size == 0){
   throw new org.camunda.bpm.engine.delegate.BpmnError("Found no suitable QPU, aborting!");
}

def sortedList = resultList.sort { it.queueSize };
def selectedQpu = resultList.get(0);
def providerName = selectedQpu.get("provider");
def qpuName = selectedQpu.get("qpu");
def language = selectedQpu.get("transpiledLanguage");
println "Selected QPU " + qpuName + " from provider " + providerName + "!";
execution.setVariable("selected_provider", providerName);
execution.setVariable("selected_qpu", qpuName);
execution.setVariable("circuit_language", language);
execution.setVariable("already_selected", true);
def circuitFile = new File("circuit.tmp");
circuitFile.write(selectedQpu.get("transpiledCircuit"));
FileValue typedFileValue = Variables
  .fileValue("circuit.tmp")
  .file(circuitFile)
  .mimeType("text/plain")
  .encoding("UTF-8")
  .create();
execution.setVariable("quantum_circuit", typedFileValue);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1g474pa" sourceRef="Activity_1bwbglt" targetRef="Activity_1cj2xig" />
      <bpmn:scriptTask id="Activity_0flfomb" name="Retrieve Fragment to Transform" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_1nuoeai</bpmn:incoming>
        <bpmn:outgoing>Flow_0mqvsez</bpmn:outgoing>
        <bpmn:script>import org.camunda.bpm.engine.variable.value.FileValue
import org.camunda.bpm.engine.variable.Variables
def xml = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:quantme="https://github.com/UST-QuAntiL/QuantME-Quantum4BPMN" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn"&gt;  &lt;bpmn:process id="Process_1" isExecutable="false"&gt;    &lt;bpmn:startEvent id="StartEvent_1"&gt;      &lt;bpmn:outgoing&gt;Flow_18gtwgm&lt;/bpmn:outgoing&gt;    &lt;/bpmn:startEvent&gt;    &lt;bpmn:endEvent id="Event_01k0kau"&gt;      &lt;bpmn:incoming&gt;Flow_0ixuvj8&lt;/bpmn:incoming&gt;    &lt;/bpmn:endEvent&gt;    &lt;bpmn:subProcess id="Activity_1qpf1my" name="Select Hardware"&gt;      &lt;bpmn:extensionElements&gt;        &lt;camunda:inputOutput&gt;          &lt;camunda:inputParameter name="circuitLanguage"&gt;openqasm&lt;/camunda:inputParameter&gt;        &lt;/camunda:inputOutput&gt;      &lt;/bpmn:extensionElements&gt;      &lt;bpmn:incoming&gt;Flow_18gtwgm&lt;/bpmn:incoming&gt;      &lt;bpmn:outgoing&gt;Flow_0ixuvj8&lt;/bpmn:outgoing&gt;      &lt;bpmn:startEvent id="Event_1mif87y"&gt;        &lt;bpmn:outgoing&gt;Flow_1t70y1y&lt;/bpmn:outgoing&gt;      &lt;/bpmn:startEvent&gt;      &lt;quantme:quantumCircuitExecutionTask id="QuantumCircuitExecutionTask_1imip2m" name="Execute QAOA Circuits" provider="ibm" qpu="aer_qasm_simulator" shots="2000" programmingLanguage="openqasm"&gt;        &lt;bpmn:extensionElements&gt;          &lt;camunda:inputOutput /&gt;        &lt;/bpmn:extensionElements&gt;        &lt;bpmn:incoming&gt;Flow_1t70y1y&lt;/bpmn:incoming&gt;        &lt;bpmn:outgoing&gt;Flow_0wg9e6f&lt;/bpmn:outgoing&gt;      &lt;/quantme:quantumCircuitExecutionTask&gt;      &lt;bpmn:endEvent id="Event_074hjrn"&gt;        &lt;bpmn:incoming&gt;Flow_0wg9e6f&lt;/bpmn:incoming&gt;      &lt;/bpmn:endEvent&gt;      &lt;bpmn:sequenceFlow id="Flow_1t70y1y" sourceRef="Event_1mif87y" targetRef="QuantumCircuitExecutionTask_1imip2m" /&gt;      &lt;bpmn:sequenceFlow id="Flow_0wg9e6f" sourceRef="QuantumCircuitExecutionTask_1imip2m" targetRef="Event_074hjrn" /&gt;    &lt;/bpmn:subProcess&gt;    &lt;bpmn:sequenceFlow id="Flow_18gtwgm" sourceRef="StartEvent_1" targetRef="Activity_1qpf1my" /&gt;    &lt;bpmn:sequenceFlow id="Flow_0ixuvj8" sourceRef="Activity_1qpf1my" targetRef="Event_01k0kau" /&gt;  &lt;/bpmn:process&gt;  &lt;bpmndi:BPMNDiagram id="BPMNDiagram_1"&gt;    &lt;bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1"&gt;      &lt;bpmndi:BPMNShape id="Event_1j6h7fm_di" bpmnElement="StartEvent_1"&gt;        &lt;dc:Bounds x="173" y="102" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_01k0kau_di" bpmnElement="Event_01k0kau"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Activity_1qpf1my_di" bpmnElement="Activity_1qpf1my" isExpanded="true"&gt;        &lt;dc:Bounds x="-100" y="-50" width="300" height="200" /&gt;        &lt;bpmndi:BPMNLabel /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_1mif87y_di" bpmnElement="Event_1mif87y"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="QuantumCircuitExecutionTask_1imip2m_di" bpmnElement="QuantumCircuitExecutionTask_1imip2m"&gt;        &lt;dc:Bounds x="0" y="10" width="100" height="80" /&gt;        &lt;bpmndi:BPMNLabel /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNShape id="Event_074hjrn_di" bpmnElement="Event_074hjrn"&gt;        &lt;dc:Bounds x="32" y="32" width="36" height="36" /&gt;      &lt;/bpmndi:BPMNShape&gt;      &lt;bpmndi:BPMNEdge id="Flow_1t70y1y_di" bpmnElement="Flow_1t70y1y"&gt;        &lt;di:waypoint x="50" y="32" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="70" y="10" /&gt;        &lt;di:waypoint x="70" y="-10" /&gt;        &lt;di:waypoint x="50" y="-10" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_0wg9e6f_di" bpmnElement="Flow_0wg9e6f"&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="50" y="-10" /&gt;        &lt;di:waypoint x="70" y="-10" /&gt;        &lt;di:waypoint x="70" y="10" /&gt;        &lt;di:waypoint x="50" y="10" /&gt;        &lt;di:waypoint x="50" y="32" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_18gtwgm_di" bpmnElement="Flow_18gtwgm"&gt;        &lt;di:waypoint x="191" y="102" /&gt;        &lt;di:waypoint x="191" y="-70" /&gt;        &lt;di:waypoint x="50" y="-70" /&gt;        &lt;di:waypoint x="50" y="-50" /&gt;      &lt;/bpmndi:BPMNEdge&gt;      &lt;bpmndi:BPMNEdge id="Flow_0ixuvj8_di" bpmnElement="Flow_0ixuvj8"&gt;        &lt;di:waypoint x="50" y="-50" /&gt;        &lt;di:waypoint x="50" y="-70" /&gt;        &lt;di:waypoint x="70" y="-70" /&gt;        &lt;di:waypoint x="70" y="-40" /&gt;        &lt;di:waypoint x="50" y="-40" /&gt;        &lt;di:waypoint x="50" y="32" /&gt;      &lt;/bpmndi:BPMNEdge&gt;    &lt;/bpmndi:BPMNPlane&gt;  &lt;/bpmndi:BPMNDiagram&gt;  &lt;bpmndi:BPMNDiagram id="BPMNDiagram_1rkibpj"&gt;    &lt;bpmndi:BPMNPlane id="BPMNPlane_0xzhbip" bpmnElement="Activity_1qpf1my" /&gt;  &lt;/bpmndi:BPMNDiagram&gt;&lt;/bpmn:definitions&gt;'
def file = new File("fragment.tmp");
file.write(xml);
FileValue typedFileValue = Variables
  .fileValue("fragment.tmp")
  .file(file)
  .mimeType("text/plain")
  .encoding("UTF-8")
  .create();
execution.setVariable("hardware_selection_fragment", typedFileValue);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1nuoeai" sourceRef="Activity_1cj2xig" targetRef="Activity_0flfomb" />
      <bpmn:scriptTask id="Activity_1cbn8eb" name="Invoke Transformation Framework" camunda:asyncBefore="true" scriptFormat="groovy">
        <bpmn:extensionElements>
          <camunda:inputOutput>
            <camunda:inputParameter name="transformation_framework_endpoint">http://192.168.178.107:8888</camunda:inputParameter>
            <camunda:inputParameter name="camunda_endpoint">http://192.168.178.107:8090/engine-rest</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_0mqvsez</bpmn:incoming>
        <bpmn:outgoing>Flow_179bw3e</bpmn:outgoing>
        <bpmn:script>import groovy.json.*
import org.camunda.bpm.engine.variable.value.FileValue

def transformationUrl = execution.getVariable("transformation_framework_endpoint");
transformationUrl = transformationUrl.endsWith("/") ? transformationUrl : transformationUrl + "/";
transformationUrl += "transform-workflow-hwselect";
println "Posting for transformation using the following URL: " + transformationUrl

def circuitUrl = execution.getVariable("camunda_endpoint");
circuitUrl = circuitUrl.endsWith("/") ? circuitUrl : circuitUrl + "/";
circuitUrl += "process-instance/" + execution.getProcessInstanceId() + "/variables/quantum_circuit/data";
println "Circuit accessible through URL: " + circuitUrl

FileValue fileVariable = execution.getVariableTyped("hardware_selection_fragment");
def fragment = fileVariable.getValue().getText("UTF-8");
def circuitLanguage = execution.getVariable("circuit_language");
def providerName = execution.getVariable("selected_provider");
def qpuName = execution.getVariable("selected_qpu");
def message = JsonOutput.toJson(["xml": fragment, "circuitLanguage": circuitLanguage, "provider": providerName, "qpu": qpuName]);
println "Sending message: " + message;

def pollingUrl = "";
try {
   def post = new URL(transformationUrl).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");
   post.getOutputStream().write(message.getBytes("UTF-8"));

   def status = post.getResponseCode();
   if(status == 200){
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       deploymentKey = json.get("deploymentKey");
       execution.setVariable("fragment_endpoint", deploymentKey);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while invoking Transformation Framework!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + transformationUrl);
}
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0mqvsez" sourceRef="Activity_0flfomb" targetRef="Activity_1cbn8eb" />
      <bpmn:exclusiveGateway id="Gateway_1w1uire">
        <bpmn:incoming>Flow_179bw3e</bpmn:incoming>
        <bpmn:incoming>Flow_0quhsw9</bpmn:incoming>
        <bpmn:outgoing>Flow_1n3xrxi</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_179bw3e" sourceRef="Activity_1cbn8eb" targetRef="Gateway_1w1uire" />
      <bpmn:sequenceFlow id="Flow_0quhsw9" name="yes" sourceRef="Gateway_13hd5iv" targetRef="Gateway_1w1uire">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("already_selected") == true &amp;&amp; already_selected == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:callActivity id="Activity_1s44tee" name="Invoke Transformed Fragment" camunda:asyncBefore="true" calledElement="${fragment_endpoint}">
        <bpmn:extensionElements>
          <camunda:in variables="all" />
          <camunda:out variables="all" />
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1n3xrxi</bpmn:incoming>
        <bpmn:outgoing>Flow_1qsdukg</bpmn:outgoing>
      </bpmn:callActivity>
      <bpmn:sequenceFlow id="Flow_1n3xrxi" sourceRef="Gateway_1w1uire" targetRef="Activity_1s44tee" />
      <bpmn:endEvent id="Event_1fmlyef" name="Terminate Hardware Selection Subprocess">
        <bpmn:incoming>Flow_1qsdukg</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_1qsdukg" sourceRef="Activity_1s44tee" targetRef="Event_1fmlyef" />
    </bpmn:subProcess>
    <bpmn:subProcess id="ResultEvaluationTask_0933y5e" name="Evaluate Results" camunda:asyncAfter="true" labels="" children="" width="100" height="80" type="bpmn:ServiceTask" collapsed="false" x="1546" y="85" isFrame="false" order="[object Object]" opentosca:onDemandDeployment="true" opentosca:deploymentModelUrl="http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaResultEvaluationService_INCOMPLETE_w1/?csar">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="dedicatedHosting">true</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_11f62wp</bpmn:incoming>
      <bpmn:outgoing>Flow_05sf6lt</bpmn:outgoing>
      <bpmn:startEvent id="Event_1du88kl">
        <bpmn:outgoing>Flow_1mj32ip</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:scriptTask id="Activity_0sbmhud" name="Adapt Model" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_1mj32ip</bpmn:incoming>
        <bpmn:outgoing>Flow_0d6aa12</bpmn:outgoing>
        <bpmn:script>
import groovy.json.*
def url = "http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaResultEvaluationService_INCOMPLETE_w1/topologytemplate/completemodel"
def blacklist = ["{http://opentosca.org/nodetypes}OpenStack_22-Victoria-w1"];
def slurper = new JsonSlurper();
def policies = slurper.parseText("{\"opentosca:CloudDeploymentModelPolicy\":\"private\"}");

def message = JsonOutput.toJson("policies": policies, "blacklist": blacklist);

try {
   def post = new URL(url).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");

   OutputStreamWriter wr = new OutputStreamWriter(post.getOutputStream());
   println message;
   wr.write(message.toString());
   wr.flush();

   def status = post.getResponseCode();
   println status;
   if(status.toString().startsWith("2")){
       println post;
       println post.getInputStream();
       def location = post.getHeaderFields()['Location'][0];
       def saveVarName = "completeModelUrl_" + "ResultEvaluationTask_0933y5e";
       execution.setVariable(saveVarName, location);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while completing Deployment Model!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + "http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaResultEvaluationService_INCOMPLETE_w1/topologytemplate/completemodel");
};
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_1mj32ip" sourceRef="Event_1du88kl" targetRef="Activity_0sbmhud" />
      <bpmn:exclusiveGateway id="Gateway_17mvlob" name="Dedidcated Policy?">
        <bpmn:incoming>Flow_0d6aa12</bpmn:incoming>
        <bpmn:outgoing>Flow_0l3vuug</bpmn:outgoing>
        <bpmn:outgoing>Flow_0h47iz8</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_0d6aa12" sourceRef="Activity_0sbmhud" targetRef="Gateway_17mvlob" />
      <bpmn:scriptTask id="Activity_0rqsypn" name="Check For Equivalent Deployment Model" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_0l3vuug</bpmn:incoming>
        <bpmn:outgoing>Flow_0z5iemr</bpmn:outgoing>
        <bpmn:script>
import groovy.json.*
def url = execution.getVariable("completeModelUrl_" + "ResultEvaluationTask_0933y5e");
url = url + "topologytemplate/checkforequivalentcsars?includeSelf=true"

try {
   def post = new URL(url).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");

   post.getOutputStream().write();
   
   def status = post.getResponseCode();
   println status;
   if(status.toString().startsWith("2")){
       println post.getInputStream();
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       def saveVarName = "equivalentCSARs_" + "ResultEvaluationTask_0933y5e";
       execution.setVariable(saveVarName, json);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while completing Deployment Model!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + url);
};
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0l3vuug" name="no" sourceRef="Gateway_17mvlob" targetRef="Activity_0rqsypn">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("dedicatedHosting") == false || dedicatedHosting == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_1jigazg" name="Check Container For Available Instance" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_0z5iemr</bpmn:incoming>
        <bpmn:outgoing>Flow_1l4bgsk</bpmn:outgoing>
        <bpmn:script>
import groovy.json.*
def containerUrl = "http://192.168.178.107:1337/csars";
def equivalentCSARs = execution.getVariable("equivalentCSARs_" + "ResultEvaluationTask_0933y5e");

try {
   for (String equivalentCSAR : equivalentCSARs ){
       println "Checking availability for CSAR with URL: " + equivalentCSAR;
       def values = equivalentCSAR.split('/');
       def csarName = values[values.length - 1];
       println "Checking availability for CSAR with name: " + csarName;

       def csarUrl = containerUrl + "/" + csarName + ".csar";
       println "Checking for ServiceTemaplates using URL: " + csarUrl;

       def get = new URL(csarUrl).openConnection();
       get.setRequestMethod("GET");
       get.setDoOutput(true);
       get.setRequestProperty("accept", "application/json");
       def status = get.getResponseCode();
       println "Status code for ServiceTemplate retrieval: " + status;
       if(status != 200){
          println "CSAR not found. Skipping...";
          continue;
       }
       def resultText = get.getInputStream().getText();
       def json = new JsonSlurper().parseText(resultText);
       def serviceTemplateLink = json.get("_links").get("servicetemplate").get("href") + "/instances";
       println "Retrieved link to ServiceTemplate: " + serviceTemplateLink;

       get = new URL(serviceTemplateLink).openConnection();
       get.setRequestMethod("GET");
       get.setDoOutput(true);
       get.setRequestProperty("accept", "application/json");
       status = get.getResponseCode();
       println "Status code for instance retrieval: " + status;
       if(status != 200){
          println "Unable to retrieve instances. Skipping...";
          continue;
       }
       resultText = get.getInputStream().getText();
       json = new JsonSlurper().parseText(resultText);
       def serviceTemplateInstances = json.get("service_template_instances");
       println serviceTemplateInstances;
       
       for (Object serviceTemplateInstance: serviceTemplateInstances){
          println "Checking instance with ID: " + serviceTemplateInstance.get("id");
          if(serviceTemplateInstance.get("state") != "CREATED"){
             println "Instance has invalid state. Skipping: " + serviceTemplateInstance.get("state");
             continue;
          }

          println "Found instance with state CREATED. Extracting selfServiceUrl...";
          def instancesLink = serviceTemplateInstance.get("_links").get("self").get("href");
          println "Retrieving instance information from URL: " + instancesLink;

          get = new URL(instancesLink).openConnection();
          get.setRequestMethod("GET");
          get.setDoOutput(true);
          get.setRequestProperty("accept", "application/json");
          status = get.getResponseCode();
          if(status != 200){
             println "Unable to retrieve instance information. Skipping...";
             continue;
          }

          resultText = get.getInputStream().getText();
          json = new JsonSlurper().parseText(resultText);
          def buildPlanLink = json .get("_links").get("build_plan_instance").get("href");
          println "Retrieved build plan URL: " + buildPlanLink;

          get = new URL(buildPlanLink).openConnection();
          get.setRequestMethod("GET");
          get.setDoOutput(true);
          get.setRequestProperty("accept", "application/json");
          status = get.getResponseCode();
          if(status != 200){
             println "Unable to retrieve build plan information. Skipping...";
             continue;
          }

          resultText = get.getInputStream().getText();
          json = new JsonSlurper().parseText(resultText);
          def outputs = json.get("outputs");
          println outputs;

          def selfserviceApplicationUrlEntry = outputs.findAll { it.name.equalsIgnoreCase("selfserviceApplicationUrl") };
          if(selfserviceApplicationUrlEntry .size() &lt; 1) {
             println "Unable to retrieve selfserviceApplicationUrl. Skipping...";
             continue;
          }
          def selfserviceApplicationUrl = selfserviceApplicationUrlEntry[0].value;
          println "Retrieved selfserviceApplicationUrl: " + selfserviceApplicationUrl;
          execution.setVariable("instanceAvailable", "true");
          execution.setVariable("ResultEvaluationTask_0933y5e" + "_selfserviceApplicationUrl", selfserviceApplicationUrl);
          return;
      }
   }

   println "Unable to retrieve suitable instances!";
   execution.setVariable("instanceAvailable", "false");
} catch(Exception e) {
   println "Exception while searching for available instances: " + e;
   execution.setVariable("instanceAvailable", "false");
};
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0z5iemr" sourceRef="Activity_0rqsypn" targetRef="Activity_1jigazg" />
      <bpmn:exclusiveGateway id="Gateway_1rf12sv" name="Instance Available?">
        <bpmn:incoming>Flow_1l4bgsk</bpmn:incoming>
        <bpmn:outgoing>Flow_18s573f</bpmn:outgoing>
        <bpmn:outgoing>Flow_1ol8zry</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_1l4bgsk" sourceRef="Activity_1jigazg" targetRef="Gateway_1rf12sv" />
      <bpmn:exclusiveGateway id="Gateway_01c94lx">
        <bpmn:incoming>Flow_18s573f</bpmn:incoming>
        <bpmn:incoming>Flow_0h47iz8</bpmn:incoming>
        <bpmn:outgoing>Flow_06j9xbo</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_18s573f" name="no" sourceRef="Gateway_1rf12sv" targetRef="Gateway_01c94lx">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("instanceAvailable") == false || instanceAvailable == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_0h47iz8" name="yes" sourceRef="Gateway_17mvlob" targetRef="Gateway_01c94lx">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("dedicatedHosting") == true &amp;&amp; dedicatedHosting == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_1fuvqz9" name="Upload to Container" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="javascript">
        <bpmn:incoming>Flow_06j9xbo</bpmn:incoming>
        <bpmn:outgoing>Flow_015oait</bpmn:outgoing>
        <bpmn:script>
var inputParams = {"AWSAccessKey":"123","AWSRegion":"123","AWSSecretKey":"123"};
var urlParts = execution.getVariable("completeModelUrl_" + "ResultEvaluationTask_0933y5e").split("/");
var reconstructedVMs= {"EC2-w1":{"name":"EC2-w1","qName":"{http://opentosca.org/nodetypes}EC2-w1","requiredAttributes":{"VMKeyPairName":"123","VMOpenPorts":"123","VMPrivateKey":"123","VMType":"123"}},"OpenStack_22-Victoria-w1":{"name":"OpenStack_22-Victoria-w1","qName":"{http://opentosca.org/nodetypes}OpenStack_22-Victoria-w1","requiredAttributes":{"VMKeyPairName":"","VMNetworks":"","VMOpenPorts":"","VMPrivateKey":"","VMType":""}}};


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}

var createCsarResponse = fetch('POST', "http://192.168.178.107:1337/csars", JSON.stringify({
    enrich: 'false',
    name: urlParts[urlParts.length - 1] + ".csar",
    url: execution.getVariable("completeModelUrl_" + "ResultEvaluationTask_0933y5e") + "?csar"
}))

var deployedTopology = JSON.parse(fetch('GET', execution.getVariable("completeModelUrl_" + "ResultEvaluationTask_0933y5e") + "topologytemplate"));

for (const [key, value] of Object.entries(deployedTopology.nodeTemplates)) {
  for (const [constructKey, constructValue] of Object.entries(reconstructedVMs)) {
    if (
      constructValue.name.includes(value.name) &amp;&amp;
      !value.name.includes("VM")
    ) {
      for (const [propertyName, propertyValue] of Object.entries(constructValue.requiredAttributes)) {
        inputParams[propertyName] = propertyValue;
      }
    }
  }
}
java.lang.System.out.println("Input parameters after update: " + JSON.stringify(inputParams));

var serviceTemplates = JSON.parse(fetch('GET', "http://192.168.178.107:1337/csars" + "/" + urlParts[urlParts.length - 1] + ".csar/servicetemplates"))
var buildPlansUrl = serviceTemplates.service_templates[0]._links.self.href + '/buildplans'
var buildPlans = JSON.parse(fetch('GET', buildPlansUrl))
var buildPlanUrl = buildPlans.plans[0]._links.self.href
var inputParameters = JSON.parse(fetch('GET', buildPlanUrl)).input_parameters
for(var i = 0; i &lt; inputParameters.length; i++) {
    if(inputParameters[i].name === "camundaEndpoint") {
        inputParameters[i].value = "http://192.168.178.107:8090/engine-rest"
    } else if(inputParameters[i].name === "camundaTopic") {
        inputParameters[i].value = "BccjDSiQohxF"
    } else {
        inputParameters[i].value = inputParams[inputParameters[i].name];
    }
}

var createInstanceResponse = fetch('POST', buildPlanUrl + "/instances", JSON.stringify(inputParameters))
execution.setVariable("ResultEvaluationTask_0933y5e" + "_deploymentBuildPlanInstanceUrl", buildPlanUrl + "/instances/" + createInstanceResponse);</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_06j9xbo" sourceRef="Gateway_01c94lx" targetRef="Activity_1fuvqz9" />
      <bpmn:scriptTask id="Activity_1k9ms0s" name="Deploy Service" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="javascript">
        <bpmn:incoming>Flow_015oait</bpmn:incoming>
        <bpmn:outgoing>Flow_1b3j90d</bpmn:outgoing>
        <bpmn:script>


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}
var buildPlanInstanceUrl = execution.getVariable("ResultEvaluationTask_0933y5e" + "_deploymentBuildPlanInstanceUrl");
var instanceUrl;
for(var i = 0; i &lt; 20; i++) {
    try {
        instanceUrl = JSON.parse(fetch('GET', buildPlanInstanceUrl))._links.service_template_instance.href; 
        if (instanceUrl) break;
     } catch (e) {
     }
     java.lang.Thread.sleep(10000);
}

console.log("InstanceUrl: " + instanceUrl);

var buildPlanUrl = "";
for(var i = 0; i &lt; 50; i++) {
    try {
        java.lang.System.out.println("Iteration: " + i);
        var createInstanceResponse = fetch('GET', instanceUrl);
        var instance = JSON.parse(createInstanceResponse);
        console.log("Instance state: " + instance.state);
        buildPlanUrl = instance._links.build_plan_instance.href;
        if (instance &amp;&amp; instance.state === "CREATED") {
            break;
        }
     } catch (e) {
        java.lang.System.out.println("Error while checking instance state: " + e);
     }
     java.lang.Thread.sleep(30000);
}

console.log("Retrieving selfServiceApplicationUrl from build plan output from URL: ", buildPlanUrl);
var buildPlanResult = JSON.parse(fetch('GET', buildPlanUrl));
console.log("Build plan result: ", buildPlanResult);
var buildPlanOutputs = buildPlanResult.outputs;
console.log("Outputs: ", buildPlanOutputs.toString());
var selfserviceApplicationUrl = buildPlanOutputs.filter((output) =&gt; output.name === "selfserviceApplicationUrl");
console.log("SelfServiceApplicationUrl: " + selfserviceApplicationUrl[0].value);
 
execution.setVariable("ResultEvaluationTask_0933y5e" + "_selfserviceApplicationUrl", selfserviceApplicationUrl[0].value);
java.lang.Thread.sleep(12000);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_015oait" sourceRef="Activity_1fuvqz9" targetRef="Activity_1k9ms0s" />
      <bpmn:exclusiveGateway id="Gateway_17tusta">
        <bpmn:incoming>Flow_1b3j90d</bpmn:incoming>
        <bpmn:incoming>Flow_1ol8zry</bpmn:incoming>
        <bpmn:outgoing>Flow_1rcy899</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_1b3j90d" sourceRef="Activity_1k9ms0s" targetRef="Gateway_17tusta" />
      <bpmn:sequenceFlow id="Flow_1ol8zry" name="yes" sourceRef="Gateway_1rf12sv" targetRef="Gateway_17tusta">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("instanceAvailable") == true &amp;&amp; instanceAvailable == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:serviceTask id="Activity_1qq2qo8" name="Invoke Service">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="Content-Type">application/json</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="url">${ResultEvaluationTask_0933y5e_selfserviceApplicationUrl.concat("/objective/max-cut")}</camunda:inputParameter>
              <camunda:inputParameter name="payload">
                <camunda:script scriptFormat="groovy">  import groovy.json.JsonBuilder
  def adjMatrix = execution.getVariable("adjMatrix");
  def mitigatedCounts = execution.getVariable("mitigatedCounts");
  def counts = execution.getVariable("counts")[0];
  def objFun = execution.getVariable("objectiveFunction");

  if (mitigatedCounts != null) {
    counts = mitigatedCounts
  }

  def request = [:];
  request.put("visualization", "True"  )
  request.put("adj_matrix", adjMatrix);
  request.put("counts", counts);
  request.put("objFun", objFun);

  def objFun_hyperparameters = [:]
  if (execution.getVariable("alpha") != null){
    objFun_hyperparameters.put("alpha", execution.getVariable("alpha"));
  }
  if (execution.getVariable("eta") != null){
    objFun_hyperparameters.put("eta", execution.getVariable("eta"));
  }
  request.put("objFun_hyperparameters", objFun_hyperparameters);

  execution.setVariable("plotUrl", "http://localhost:8090/engine-rest/process-instance/" + execution.getProcessInstanceId() + "/variables/maxCutPlot/data");

  requeststring = new JsonBuilder(request).toPrettyString()
  return requeststring;</camunda:script>
              </camunda:inputParameter>
              <camunda:outputParameter name="objValue">
                <camunda:script scriptFormat="Groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
objValue= resp.get('objective_value')
println("obj values:" + objValue.toString());
return objValue.toDouble();</camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="evaluatedCosts">
                <camunda:script scriptFormat="Groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp)
costs= resp.get('costs')
println(costs);
return costs;</camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="maxCutPlot">
                <camunda:script scriptFormat="Groovy">import org.camunda.bpm.engine.variable.value.FileValue
								import org.camunda.bpm.engine.variable.Variables
                import groovy.json.JsonSlurper
                def slurper = new JsonSlurper().parseText(response)
								String filename = "plot.png";
								FileValue typedFileValue = Variables.fileValue(filename).file(slurper.visualization.decodeBase64()).mimeType("application/png").create()
typedFileValue</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="objectiveFunction">expectationValue</camunda:inputParameter>
            <camunda:inputParameter name="costFunction">maxcut</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1rcy899</bpmn:incoming>
        <bpmn:outgoing>Flow_1n2m038</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_1rcy899" sourceRef="Gateway_17tusta" targetRef="Activity_1qq2qo8" />
      <bpmn:endEvent id="Event_0sc1z59">
        <bpmn:incoming>Flow_1n2m038</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_1n2m038" sourceRef="Activity_1qq2qo8" targetRef="Event_0sc1z59" />
    </bpmn:subProcess>
    <bpmn:subProcess id="Task_009hsrk" name="Generate Circuits" camunda:asyncAfter="true" labels="" children="" width="100" height="80" type="bpmn:ServiceTask" collapsed="false" x="186" y="85" isFrame="false" order="[object Object]" opentosca:onDemandDeployment="true" opentosca:deploymentModelUrl="http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitGeneratorService_INCOMPLETE_w1/?csar">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="dedicatedHosting">undefined</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1m60wcg</bpmn:incoming>
      <bpmn:outgoing>Flow_18kx5os</bpmn:outgoing>
      <bpmn:startEvent id="Event_08jl4kv">
        <bpmn:outgoing>Flow_09w17hm</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:scriptTask id="Activity_1fcswuf" name="Adapt Model" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_09w17hm</bpmn:incoming>
        <bpmn:outgoing>Flow_0inp8pw</bpmn:outgoing>
        <bpmn:script>
import groovy.json.*
def url = "http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitGeneratorService_INCOMPLETE_w1/topologytemplate/completemodel"
def blacklist = ["{http://opentosca.org/nodetypes}OpenStack_22-Victoria-w1"];
def slurper = new JsonSlurper();
def policies = slurper.parseText("{\"opentosca:LocationPolicy\":\"US\",\"opentosca:CloudDeploymentModelPolicy\":\"public\"}");

def message = JsonOutput.toJson("policies": policies, "blacklist": blacklist);

try {
   def post = new URL(url).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");

   OutputStreamWriter wr = new OutputStreamWriter(post.getOutputStream());
   println message;
   wr.write(message.toString());
   wr.flush();

   def status = post.getResponseCode();
   println status;
   if(status.toString().startsWith("2")){
       println post;
       println post.getInputStream();
       def location = post.getHeaderFields()['Location'][0];
       def saveVarName = "completeModelUrl_" + "Task_009hsrk";
       execution.setVariable(saveVarName, location);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while completing Deployment Model!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + "http://192.168.178.107:8093/winery/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitGeneratorService_INCOMPLETE_w1/topologytemplate/completemodel");
};
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_09w17hm" sourceRef="Event_08jl4kv" targetRef="Activity_1fcswuf" />
      <bpmn:exclusiveGateway id="Gateway_0pud2d9" name="Dedidcated Policy?">
        <bpmn:incoming>Flow_0inp8pw</bpmn:incoming>
        <bpmn:outgoing>Flow_07p5154</bpmn:outgoing>
        <bpmn:outgoing>Flow_1c0f1gg</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_0inp8pw" sourceRef="Activity_1fcswuf" targetRef="Gateway_0pud2d9" />
      <bpmn:scriptTask id="Activity_0jghzrl" name="Check For Equivalent Deployment Model" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_07p5154</bpmn:incoming>
        <bpmn:outgoing>Flow_0ksfaw7</bpmn:outgoing>
        <bpmn:script>
import groovy.json.*
def url = execution.getVariable("completeModelUrl_" + "Task_009hsrk");
url = url + "topologytemplate/checkforequivalentcsars?includeSelf=true"

try {
   def post = new URL(url).openConnection();
   post.setRequestMethod("POST");
   post.setDoOutput(true);
   post.setRequestProperty("Content-Type", "application/json");
   post.setRequestProperty("accept", "application/json");

   post.getOutputStream().write();
   
   def status = post.getResponseCode();
   println status;
   if(status.toString().startsWith("2")){
       println post.getInputStream();
       def resultText = post.getInputStream().getText();
       def slurper = new JsonSlurper();
       def json = slurper.parseText(resultText);
       def saveVarName = "equivalentCSARs_" + "Task_009hsrk";
       execution.setVariable(saveVarName, json);
   }else{
       throw new org.camunda.bpm.engine.delegate.BpmnError("Received status code " + status + " while completing Deployment Model!");
   }
} catch(org.camunda.bpm.engine.delegate.BpmnError e) {
   println e.errorCode;
   throw new org.camunda.bpm.engine.delegate.BpmnError(e.errorCode);
} catch(Exception e) {
   println e;
   throw new org.camunda.bpm.engine.delegate.BpmnError("Unable to connect to given endpoint: " + url);
};
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_07p5154" name="no" sourceRef="Gateway_0pud2d9" targetRef="Activity_0jghzrl">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("dedicatedHosting") == false || dedicatedHosting == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_1dm74ru" name="Check Container For Available Instance" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
        <bpmn:incoming>Flow_0ksfaw7</bpmn:incoming>
        <bpmn:outgoing>Flow_1yq5gf7</bpmn:outgoing>
        <bpmn:script>
import groovy.json.*
def containerUrl = "http://192.168.178.107:1337/csars";
def equivalentCSARs = execution.getVariable("equivalentCSARs_" + "Task_009hsrk");

try {
   for (String equivalentCSAR : equivalentCSARs ){
       println "Checking availability for CSAR with URL: " + equivalentCSAR;
       def values = equivalentCSAR.split('/');
       def csarName = values[values.length - 1];
       println "Checking availability for CSAR with name: " + csarName;

       def csarUrl = containerUrl + "/" + csarName + ".csar";
       println "Checking for ServiceTemaplates using URL: " + csarUrl;

       def get = new URL(csarUrl).openConnection();
       get.setRequestMethod("GET");
       get.setDoOutput(true);
       get.setRequestProperty("accept", "application/json");
       def status = get.getResponseCode();
       println "Status code for ServiceTemplate retrieval: " + status;
       if(status != 200){
          println "CSAR not found. Skipping...";
          continue;
       }
       def resultText = get.getInputStream().getText();
       def json = new JsonSlurper().parseText(resultText);
       def serviceTemplateLink = json.get("_links").get("servicetemplate").get("href") + "/instances";
       println "Retrieved link to ServiceTemplate: " + serviceTemplateLink;

       get = new URL(serviceTemplateLink).openConnection();
       get.setRequestMethod("GET");
       get.setDoOutput(true);
       get.setRequestProperty("accept", "application/json");
       status = get.getResponseCode();
       println "Status code for instance retrieval: " + status;
       if(status != 200){
          println "Unable to retrieve instances. Skipping...";
          continue;
       }
       resultText = get.getInputStream().getText();
       json = new JsonSlurper().parseText(resultText);
       def serviceTemplateInstances = json.get("service_template_instances");
       println serviceTemplateInstances;
       
       for (Object serviceTemplateInstance: serviceTemplateInstances){
          println "Checking instance with ID: " + serviceTemplateInstance.get("id");
          if(serviceTemplateInstance.get("state") != "CREATED"){
             println "Instance has invalid state. Skipping: " + serviceTemplateInstance.get("state");
             continue;
          }

          println "Found instance with state CREATED. Extracting selfServiceUrl...";
          def instancesLink = serviceTemplateInstance.get("_links").get("self").get("href");
          println "Retrieving instance information from URL: " + instancesLink;

          get = new URL(instancesLink).openConnection();
          get.setRequestMethod("GET");
          get.setDoOutput(true);
          get.setRequestProperty("accept", "application/json");
          status = get.getResponseCode();
          if(status != 200){
             println "Unable to retrieve instance information. Skipping...";
             continue;
          }

          resultText = get.getInputStream().getText();
          json = new JsonSlurper().parseText(resultText);
          def buildPlanLink = json .get("_links").get("build_plan_instance").get("href");
          println "Retrieved build plan URL: " + buildPlanLink;

          get = new URL(buildPlanLink).openConnection();
          get.setRequestMethod("GET");
          get.setDoOutput(true);
          get.setRequestProperty("accept", "application/json");
          status = get.getResponseCode();
          if(status != 200){
             println "Unable to retrieve build plan information. Skipping...";
             continue;
          }

          resultText = get.getInputStream().getText();
          json = new JsonSlurper().parseText(resultText);
          def outputs = json.get("outputs");
          println outputs;

          def selfserviceApplicationUrlEntry = outputs.findAll { it.name.equalsIgnoreCase("selfserviceApplicationUrl") };
          if(selfserviceApplicationUrlEntry .size() &lt; 1) {
             println "Unable to retrieve selfserviceApplicationUrl. Skipping...";
             continue;
          }
          def selfserviceApplicationUrl = selfserviceApplicationUrlEntry[0].value;
          println "Retrieved selfserviceApplicationUrl: " + selfserviceApplicationUrl;
          execution.setVariable("instanceAvailable", "true");
          execution.setVariable("Task_009hsrk" + "_selfserviceApplicationUrl", selfserviceApplicationUrl);
          return;
      }
   }

   println "Unable to retrieve suitable instances!";
   execution.setVariable("instanceAvailable", "false");
} catch(Exception e) {
   println "Exception while searching for available instances: " + e;
   execution.setVariable("instanceAvailable", "false");
};
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0ksfaw7" sourceRef="Activity_0jghzrl" targetRef="Activity_1dm74ru" />
      <bpmn:exclusiveGateway id="Gateway_08inpbc" name="Instance Available?">
        <bpmn:incoming>Flow_1yq5gf7</bpmn:incoming>
        <bpmn:outgoing>Flow_0md8hr9</bpmn:outgoing>
        <bpmn:outgoing>Flow_04wsp8c</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_1yq5gf7" sourceRef="Activity_1dm74ru" targetRef="Gateway_08inpbc" />
      <bpmn:exclusiveGateway id="Gateway_00wf4gh">
        <bpmn:incoming>Flow_0md8hr9</bpmn:incoming>
        <bpmn:incoming>Flow_1c0f1gg</bpmn:incoming>
        <bpmn:outgoing>Flow_149ewqv</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_0md8hr9" name="no" sourceRef="Gateway_08inpbc" targetRef="Gateway_00wf4gh">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("instanceAvailable") == false || instanceAvailable == false}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:sequenceFlow id="Flow_1c0f1gg" name="yes" sourceRef="Gateway_0pud2d9" targetRef="Gateway_00wf4gh">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("dedicatedHosting") == true &amp;&amp; dedicatedHosting == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:scriptTask id="Activity_0p80720" name="Upload to Container" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="javascript">
        <bpmn:incoming>Flow_149ewqv</bpmn:incoming>
        <bpmn:outgoing>Flow_0g2zy2a</bpmn:outgoing>
        <bpmn:script>
var inputParams = {"AWSAccessKey":"123","AWSRegion":"123","AWSSecretKey":"123"};
var urlParts = execution.getVariable("completeModelUrl_" + "Task_009hsrk").split("/");
var reconstructedVMs= {"EC2-w1":{"name":"EC2-w1","qName":"{http://opentosca.org/nodetypes}EC2-w1","requiredAttributes":{"VMKeyPairName":"123","VMOpenPorts":"123","VMPrivateKey":"123","VMType":"123"}},"OpenStack_22-Victoria-w1":{"name":"OpenStack_22-Victoria-w1","qName":"{http://opentosca.org/nodetypes}OpenStack_22-Victoria-w1","requiredAttributes":{"VMKeyPairName":"","VMNetworks":"","VMOpenPorts":"","VMPrivateKey":"","VMType":""}}};


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}

var createCsarResponse = fetch('POST', "http://192.168.178.107:1337/csars", JSON.stringify({
    enrich: 'false',
    name: urlParts[urlParts.length - 1] + ".csar",
    url: execution.getVariable("completeModelUrl_" + "Task_009hsrk") + "?csar"
}))

var deployedTopology = JSON.parse(fetch('GET', execution.getVariable("completeModelUrl_" + "Task_009hsrk") + "topologytemplate"));

for (const [key, value] of Object.entries(deployedTopology.nodeTemplates)) {
  for (const [constructKey, constructValue] of Object.entries(reconstructedVMs)) {
    if (
      constructValue.name.includes(value.name) &amp;&amp;
      !value.name.includes("VM")
    ) {
      for (const [propertyName, propertyValue] of Object.entries(constructValue.requiredAttributes)) {
        inputParams[propertyName] = propertyValue;
      }
    }
  }
}
java.lang.System.out.println("Input parameters after update: " + JSON.stringify(inputParams));

var serviceTemplates = JSON.parse(fetch('GET', "http://192.168.178.107:1337/csars" + "/" + urlParts[urlParts.length - 1] + ".csar/servicetemplates"))
var buildPlansUrl = serviceTemplates.service_templates[0]._links.self.href + '/buildplans'
var buildPlans = JSON.parse(fetch('GET', buildPlansUrl))
var buildPlanUrl = buildPlans.plans[0]._links.self.href
var inputParameters = JSON.parse(fetch('GET', buildPlanUrl)).input_parameters
for(var i = 0; i &lt; inputParameters.length; i++) {
    if(inputParameters[i].name === "camundaEndpoint") {
        inputParameters[i].value = "http://192.168.178.107:8090/engine-rest"
    } else if(inputParameters[i].name === "camundaTopic") {
        inputParameters[i].value = "N8QnLTMPtfPq"
    } else {
        inputParameters[i].value = inputParams[inputParameters[i].name];
    }
}

var createInstanceResponse = fetch('POST', buildPlanUrl + "/instances", JSON.stringify(inputParameters))
execution.setVariable("Task_009hsrk" + "_deploymentBuildPlanInstanceUrl", buildPlanUrl + "/instances/" + createInstanceResponse);</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_149ewqv" sourceRef="Gateway_00wf4gh" targetRef="Activity_0p80720" />
      <bpmn:scriptTask id="Activity_0l2vyzk" name="Deploy Service" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="javascript">
        <bpmn:incoming>Flow_0g2zy2a</bpmn:incoming>
        <bpmn:outgoing>Flow_124lhtt</bpmn:outgoing>
        <bpmn:script>


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}
var buildPlanInstanceUrl = execution.getVariable("Task_009hsrk" + "_deploymentBuildPlanInstanceUrl");
var instanceUrl;
for(var i = 0; i &lt; 20; i++) {
    try {
        instanceUrl = JSON.parse(fetch('GET', buildPlanInstanceUrl))._links.service_template_instance.href; 
        if (instanceUrl) break;
     } catch (e) {
     }
     java.lang.Thread.sleep(10000);
}

console.log("InstanceUrl: " + instanceUrl);

var buildPlanUrl = "";
for(var i = 0; i &lt; 50; i++) {
    try {
        java.lang.System.out.println("Iteration: " + i);
        var createInstanceResponse = fetch('GET', instanceUrl);
        var instance = JSON.parse(createInstanceResponse);
        console.log("Instance state: " + instance.state);
        buildPlanUrl = instance._links.build_plan_instance.href;
        if (instance &amp;&amp; instance.state === "CREATED") {
            break;
        }
     } catch (e) {
        java.lang.System.out.println("Error while checking instance state: " + e);
     }
     java.lang.Thread.sleep(30000);
}

console.log("Retrieving selfServiceApplicationUrl from build plan output from URL: ", buildPlanUrl);
var buildPlanResult = JSON.parse(fetch('GET', buildPlanUrl));
console.log("Build plan result: ", buildPlanResult);
var buildPlanOutputs = buildPlanResult.outputs;
console.log("Outputs: ", buildPlanOutputs.toString());
var selfserviceApplicationUrl = buildPlanOutputs.filter((output) =&gt; output.name === "selfserviceApplicationUrl");
console.log("SelfServiceApplicationUrl: " + selfserviceApplicationUrl[0].value);
 
execution.setVariable("Task_009hsrk" + "_selfserviceApplicationUrl", selfserviceApplicationUrl[0].value);
java.lang.Thread.sleep(12000);
</bpmn:script>
      </bpmn:scriptTask>
      <bpmn:sequenceFlow id="Flow_0g2zy2a" sourceRef="Activity_0p80720" targetRef="Activity_0l2vyzk" />
      <bpmn:exclusiveGateway id="Gateway_094kfre">
        <bpmn:incoming>Flow_124lhtt</bpmn:incoming>
        <bpmn:incoming>Flow_04wsp8c</bpmn:incoming>
        <bpmn:outgoing>Flow_1adgbzm</bpmn:outgoing>
      </bpmn:exclusiveGateway>
      <bpmn:sequenceFlow id="Flow_124lhtt" sourceRef="Activity_0l2vyzk" targetRef="Gateway_094kfre" />
      <bpmn:sequenceFlow id="Flow_04wsp8c" name="yes" sourceRef="Gateway_08inpbc" targetRef="Gateway_094kfre">
        <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${execution.hasVariable("instanceAvailable") == true &amp;&amp; instanceAvailable == true}</bpmn:conditionExpression>
      </bpmn:sequenceFlow>
      <bpmn:serviceTask id="Activity_0hbe7uh" name="Invoke Service">
        <bpmn:extensionElements>
          <camunda:connector>
            <camunda:inputOutput>
              <camunda:inputParameter name="method">POST</camunda:inputParameter>
              <camunda:inputParameter name="headers">
                <camunda:map>
                  <camunda:entry key="Accept">application/json</camunda:entry>
                  <camunda:entry key="Content-Type">application/json</camunda:entry>
                </camunda:map>
              </camunda:inputParameter>
              <camunda:inputParameter name="url">${Task_009hsrk_selfserviceApplicationUrl.concat("/algorithms/maxcutqaoa")}</camunda:inputParameter>
              <camunda:inputParameter name="payload">
                <camunda:script scriptFormat="groovy">
			    			    import groovy.json.JsonBuilder
                  def matrix = execution.getVariable("adjMatrix");
                  def gammas = execution.getVariable("gammas");
                  def betas = execution.getVariable("betas");
                  def request = [:];

                    if (matrix instanceof String) {
                        println("Received matrix of type string: " + matrix);
                        matrix = matrix.drop(1).take(matrix.length()-2);
                        matrix= matrix.replaceAll("\\s","").split("\\],\\[");
                        println("Separated matrix: " + matrix.toString());

                        new_matrix = []
                        for (el in matrix){
                            def current_array = el.replaceAll("\\[","").replaceAll("\\]","")
                            println("Current array: " + current_array.toString());
                            new_arr = [];
                            def numbers = current_array.split(",");
                            println("Numbers: " + numbers.toString());

                            for (number in numbers){
                                new_arr.push(number.toDouble());
                            }
                            new_matrix.push(new_arr);
                        }

                        matrix = new_matrix;
                        println("Matrix after parsing: " + matrix.toString());
                        execution.setVariable("adjMatrix", matrix);
                    }

                  if (gammas instanceof String) {
                             def current_gammas = gammas.replaceAll("\\[","").replaceAll("\\]","")
                              println("Current gammas: " + current_gammas.toString());
                              new_gammas = [];
                              def numbers = current_gammas.split(",");
                              for (number in numbers){
                                  new_gammas.push(number.toDouble());
                              }
                              gammas = new_gammas
                              execution.setVariable("gammas", gammas);
                  }

                    if (betas instanceof String) {
                               def current_betas = betas.replaceAll("\\[","").replaceAll("\\]","")
                                println("Current betas: " + current_betas.toString());
                                new_betas = [];
                                def numbers = current_betas.split(",");
                                for (number in numbers){
                                    new_betas.push(number.toDouble());
                                }
                                betas = new_betas
                                execution.setVariable("betas", betas);
                    }

                request.put("adj_matrix", matrix);
                  request.put("parameterized", "false");
                  request.put("p", 1);
                    request.put("gammas", gammas);
                    request.put("betas", betas);
                  if (execution.getVariable("wsBitstring") != null) {
                    request.put("initial_state", execution.getVariable("wsBitstring"));
                  }
                  requeststring = new JsonBuilder(request).toPrettyString()
                  print("test")
                  print(requeststring)
                  return requeststring;
</camunda:script>
              </camunda:inputParameter>
              <camunda:outputParameter name="circuit">
                <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
circuit= resp.get('circuit')
println(circuit);
return [circuit];</camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="circuitDepthUntranspiled">
                <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
depth= resp.get('depth')
println(depth);
return depth;</camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="circuitNumQubits">
                <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
n_qubits= resp.get('n_qubits')
println(n_qubits);
return n_qubits;</camunda:script>
              </camunda:outputParameter>
              <camunda:outputParameter name="circuitVisualization">
                <camunda:script scriptFormat="Groovy">import org.camunda.bpm.engine.variable.value.FileValue
            								import org.camunda.bpm.engine.variable.Variables
                            import groovy.json.JsonSlurper
                            def slurper = new JsonSlurper().parseText(response)
            								String filename = "circuit.png";
            								FileValue typedFileValue = Variables.fileValue(filename).file(slurper.visualization.decodeBase64()).mimeType("application/png").create()
            typedFileValue</camunda:script>
              </camunda:outputParameter>
            </camunda:inputOutput>
            <camunda:connectorId>http-connector</camunda:connectorId>
          </camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="url">quokka/maxcut</camunda:inputParameter>
          </camunda:inputOutput>
        </bpmn:extensionElements>
        <bpmn:incoming>Flow_1adgbzm</bpmn:incoming>
        <bpmn:outgoing>Flow_0roxnwe</bpmn:outgoing>
      </bpmn:serviceTask>
      <bpmn:sequenceFlow id="Flow_1adgbzm" sourceRef="Gateway_094kfre" targetRef="Activity_0hbe7uh" />
      <bpmn:endEvent id="Event_0vvcchi">
        <bpmn:incoming>Flow_0roxnwe</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0roxnwe" sourceRef="Activity_0hbe7uh" targetRef="Event_0vvcchi" />
    </bpmn:subProcess>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_070m5p1">
      <bpmndi:BPMNShape id="EndEvent_0pjq7fr_di" bpmnElement="EndEvent_0pjq7fr">
        <dc:Bounds x="2796" y="107" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="StartEvent_0ej6lwb_di" bpmnElement="StartEvent_0ej6lwb">
        <dc:Bounds x="0" y="107" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="UserTask_06awxe9_di" bpmnElement="Task_1h88ddf">
        <dc:Bounds x="2646" y="85" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0vr629i" bpmnElement="Gateway_0wq36cd" isMarkerVisible="true">
        <dc:Bounds x="2546" y="100" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2541" y="157" width="60" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0pj22b3" bpmnElement="Gateway_0qaj4kt" isMarkerVisible="true">
        <dc:Bounds x="86" y="100" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_17hnmiq_di" bpmnElement="ParameterOptimizationTask_01m89mt" isExpanded="true">
        <dc:Bounds x="1696" y="0" width="800" height="250" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_149uz5z_di" bpmnElement="Event_149uz5z">
        <dc:Bounds x="1766" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_17hxwps_di" bpmnElement="Gateway_17hxwps" isMarkerVisible="true">
        <dc:Bounds x="1852" y="50" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1838" y="26" width="78" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1rp0h2h_di" bpmnElement="Gateway_1rp0h2h" isMarkerVisible="true">
        <dc:Bounds x="2102" y="50" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0us00q7_di" bpmnElement="Event_0us00q7">
        <dc:Bounds x="2352" y="57" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0whr1sl_di" bpmnElement="Activity_0whr1sl">
        <dc:Bounds x="2202" y="35" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0v3eoix_di" bpmnElement="Activity_0v3eoix">
        <dc:Bounds x="1952" y="110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_15onlx2_di" bpmnElement="Flow_15onlx2">
        <di:waypoint x="1802" y="75" />
        <di:waypoint x="1852" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1hcu1wv_di" bpmnElement="Flow_1hcu1wv">
        <di:waypoint x="1902" y="75" />
        <di:waypoint x="1927" y="75" />
        <di:waypoint x="2002" y="75" />
        <di:waypoint x="2077" y="75" />
        <di:waypoint x="2102" y="75" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2039.5" y="51" width="14" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0l8tpv2_di" bpmnElement="Flow_0l8tpv2">
        <di:waypoint x="1877" y="100" />
        <di:waypoint x="1877" y="150" />
        <di:waypoint x="1952" y="150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1914.5" y="126" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1xljtwd_di" bpmnElement="Flow_1xljtwd">
        <di:waypoint x="2052" y="150" />
        <di:waypoint x="2127" y="150" />
        <di:waypoint x="2127" y="100" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1wfxaf5_di" bpmnElement="Flow_1wfxaf5">
        <di:waypoint x="2152" y="75" />
        <di:waypoint x="2202" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rrb07z_di" bpmnElement="Flow_0rrb07z">
        <di:waypoint x="2302" y="75" />
        <di:waypoint x="2352" y="75" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_0yrr2iy_di" bpmnElement="Activity_1p2awjj" isExpanded="true">
        <dc:Bounds x="336" y="37.5" width="1160" height="175" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1ax0239_di" bpmnElement="Event_1ax0239">
        <dc:Bounds x="406" y="94.5" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_13hd5iv_di" bpmnElement="Gateway_13hd5iv" isMarkerVisible="true">
        <dc:Bounds x="492" y="87.5" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1bwbglt_di" bpmnElement="Activity_1bwbglt">
        <dc:Bounds x="592" y="72.5" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1cj2xig_di" bpmnElement="Activity_1cj2xig">
        <dc:Bounds x="742" y="72.5" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0flfomb_di" bpmnElement="Activity_0flfomb">
        <dc:Bounds x="892" y="72.5" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1cbn8eb_di" bpmnElement="Activity_1cbn8eb">
        <dc:Bounds x="1042" y="72.5" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1w1uire_di" bpmnElement="Gateway_1w1uire" isMarkerVisible="true">
        <dc:Bounds x="1192" y="87.5" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1s44tee_di" bpmnElement="Activity_1s44tee">
        <dc:Bounds x="1292" y="72.5" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1fmlyef_di" bpmnElement="Event_1fmlyef">
        <dc:Bounds x="1442" y="94.5" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1lv7348_di" bpmnElement="Flow_1lv7348">
        <di:waypoint x="442" y="112.5" />
        <di:waypoint x="492" y="113" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0v96nee_di" bpmnElement="Flow_0v96nee">
        <di:waypoint x="542" y="113" />
        <di:waypoint x="592" y="112.5" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="567" y="88.75" width="13" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1g474pa_di" bpmnElement="Flow_1g474pa">
        <di:waypoint x="692" y="112.5" />
        <di:waypoint x="742" y="112.5" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1nuoeai_di" bpmnElement="Flow_1nuoeai">
        <di:waypoint x="842" y="112.5" />
        <di:waypoint x="892" y="112.5" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0mqvsez_di" bpmnElement="Flow_0mqvsez">
        <di:waypoint x="992" y="112.5" />
        <di:waypoint x="1042" y="112.5" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_179bw3e_di" bpmnElement="Flow_179bw3e">
        <di:waypoint x="1142" y="112.5" />
        <di:waypoint x="1192" y="113" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0quhsw9_di" bpmnElement="Flow_0quhsw9">
        <di:waypoint x="517" y="137.5" />
        <di:waypoint x="567" y="187.5" />
        <di:waypoint x="642" y="187.5" />
        <di:waypoint x="717" y="187.5" />
        <di:waypoint x="792" y="187.5" />
        <di:waypoint x="867" y="187.5" />
        <di:waypoint x="942" y="187.5" />
        <di:waypoint x="1017" y="187.5" />
        <di:waypoint x="1092" y="187.5" />
        <di:waypoint x="1167" y="187.5" />
        <di:waypoint x="1217" y="137.5" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="904.5" y="163.5" width="19" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1n3xrxi_di" bpmnElement="Flow_1n3xrxi">
        <di:waypoint x="1242" y="113" />
        <di:waypoint x="1292" y="112.5" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1qsdukg_di" bpmnElement="Flow_1qsdukg">
        <di:waypoint x="1392" y="112.5" />
        <di:waypoint x="1442" y="112.5" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_18qhwig_di" bpmnElement="ResultEvaluationTask_0933y5e">
        <dc:Bounds x="1546" y="85" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0m77g2x_di" bpmnElement="Task_009hsrk">
        <dc:Bounds x="186" y="85" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_134gyga_di" bpmnElement="SequenceFlow_134gyga">
        <di:waypoint x="2746" y="125" />
        <di:waypoint x="2796" y="125" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_17fnx68" bpmnElement="Flow_1m60wcg">
        <di:waypoint x="136" y="125" />
        <di:waypoint x="186" y="125" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0czrsh0_di" bpmnElement="Flow_0czrsh0">
        <di:waypoint x="2596" y="125" />
        <di:waypoint x="2646" y="125" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="2621" y="101" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_18kx5os_di" bpmnElement="Flow_18kx5os">
        <di:waypoint x="286" y="125" />
        <di:waypoint x="336" y="125" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1qkl8n3_di" bpmnElement="Flow_1qkl8n3">
        <di:waypoint x="36" y="125" />
        <di:waypoint x="86" y="125" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tljgkh_di" bpmnElement="Flow_0tljgkh">
        <di:waypoint x="2571" y="150" />
        <di:waypoint x="2521" y="285" />
        <di:waypoint x="2096" y="285" />
        <di:waypoint x="1671" y="285" />
        <di:waypoint x="1596" y="285" />
        <di:waypoint x="1521" y="285" />
        <di:waypoint x="916" y="285" />
        <di:waypoint x="311" y="285" />
        <di:waypoint x="236" y="285" />
        <di:waypoint x="161" y="285" />
        <di:waypoint x="111" y="150" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wlfysg_di" bpmnElement="Flow_0wlfysg">
        <di:waypoint x="2496" y="125" />
        <di:waypoint x="2546" y="125" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05sf6lt_di" bpmnElement="Flow_05sf6lt">
        <di:waypoint x="1646" y="125" />
        <di:waypoint x="1696" y="125" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_11f62wp_di" bpmnElement="Flow_11f62wp">
        <di:waypoint x="1496" y="125" />
        <di:waypoint x="1546" y="125" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_06c9g4r">
    <bpmndi:BPMNPlane id="BPMNPlane_0fu09k7" bpmnElement="ParameterOptimizationTask_01m89mt" />
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_0bduktd">
    <bpmndi:BPMNPlane id="BPMNPlane_0vkys4q" bpmnElement="ResultEvaluationTask_0933y5e">
      <bpmndi:BPMNShape id="Event_1du88kl_di" bpmnElement="Event_1du88kl">
        <dc:Bounds x="1558" y="97" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0sbmhud_di" bpmnElement="Activity_0sbmhud">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_17mvlob_di" bpmnElement="Gateway_17mvlob" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rqsypn_di" bpmnElement="Activity_0rqsypn">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1jigazg_di" bpmnElement="Activity_1jigazg">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1rf12sv_di" bpmnElement="Gateway_1rf12sv" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_01c94lx_di" bpmnElement="Gateway_01c94lx" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1fuvqz9_di" bpmnElement="Activity_1fuvqz9">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1k9ms0s_di" bpmnElement="Activity_1k9ms0s">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_17tusta_di" bpmnElement="Gateway_17tusta" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1qq2qo8_di" bpmnElement="Activity_1qq2qo8">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0sc1z59_di" bpmnElement="Event_0sc1z59">
        <dc:Bounds x="32" y="32" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1mj32ip_di" bpmnElement="Flow_1mj32ip">
        <di:waypoint x="1558" y="115" />
        <di:waypoint x="830" y="115" />
        <di:waypoint x="830" y="50" />
        <di:waypoint x="100" y="50" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0d6aa12_di" bpmnElement="Flow_0d6aa12">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0l3vuug_di" bpmnElement="Flow_0l3vuug">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0z5iemr_di" bpmnElement="Flow_0z5iemr">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1l4bgsk_di" bpmnElement="Flow_1l4bgsk">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_18s573f_di" bpmnElement="Flow_18s573f">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0h47iz8_di" bpmnElement="Flow_0h47iz8">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_06j9xbo_di" bpmnElement="Flow_06j9xbo">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_015oait_di" bpmnElement="Flow_015oait">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1b3j90d_di" bpmnElement="Flow_1b3j90d">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1ol8zry_di" bpmnElement="Flow_1ol8zry">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1rcy899_di" bpmnElement="Flow_1rcy899">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1n2m038_di" bpmnElement="Flow_1n2m038">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="32" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1yii5wp">
    <bpmndi:BPMNPlane id="BPMNPlane_1j14xcp" bpmnElement="Activity_0v3eoix">
      <bpmndi:BPMNShape id="Event_0oazket_di" bpmnElement="Event_0oazket">
        <dc:Bounds x="1964" y="122" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1rusmlz_di" bpmnElement="Activity_1rusmlz">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1x53cy0_di" bpmnElement="Gateway_1x53cy0" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1q8kkh2_di" bpmnElement="Activity_1q8kkh2">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1164rcl_di" bpmnElement="Activity_1164rcl">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1u2f9aq_di" bpmnElement="Gateway_1u2f9aq" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0qpnik5_di" bpmnElement="Gateway_0qpnik5" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0e24lbn_di" bpmnElement="Activity_0e24lbn">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0iy6hbn_di" bpmnElement="Activity_0iy6hbn">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1ccmm87_di" bpmnElement="Gateway_1ccmm87" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_09drjq8_di" bpmnElement="Activity_09drjq8">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1bjtu4k_di" bpmnElement="Event_1bjtu4k">
        <dc:Bounds x="32" y="32" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_14lir3m_di" bpmnElement="Flow_14lir3m">
        <di:waypoint x="1964" y="140" />
        <di:waypoint x="1030" y="140" />
        <di:waypoint x="1030" y="50" />
        <di:waypoint x="100" y="50" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1xfmz0x_di" bpmnElement="Flow_1xfmz0x">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_18iosmk_di" bpmnElement="Flow_18iosmk">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_05e0oi3_di" bpmnElement="Flow_05e0oi3">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1sqn2w8_di" bpmnElement="Flow_1sqn2w8">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1t151ir_di" bpmnElement="Flow_1t151ir">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07mgdgq_di" bpmnElement="Flow_07mgdgq">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1tzgxte_di" bpmnElement="Flow_1tzgxte">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0kibfxr_di" bpmnElement="Flow_0kibfxr">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1icz77l_di" bpmnElement="Flow_1icz77l">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1dx4vzw_di" bpmnElement="Flow_1dx4vzw">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_133tjf2_di" bpmnElement="Flow_133tjf2">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rax3n4_di" bpmnElement="Flow_0rax3n4">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="32" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1ux9wky">
    <bpmndi:BPMNPlane id="BPMNPlane_1nzpz0t" bpmnElement="Task_009hsrk">
      <bpmndi:BPMNShape id="Event_08jl4kv_di" bpmnElement="Event_08jl4kv">
        <dc:Bounds x="198" y="97" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1fcswuf_di" bpmnElement="Activity_1fcswuf">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0pud2d9_di" bpmnElement="Gateway_0pud2d9" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0jghzrl_di" bpmnElement="Activity_0jghzrl">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1dm74ru_di" bpmnElement="Activity_1dm74ru">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_08inpbc_di" bpmnElement="Gateway_08inpbc" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_00wf4gh_di" bpmnElement="Gateway_00wf4gh" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0p80720_di" bpmnElement="Activity_0p80720">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0l2vyzk_di" bpmnElement="Activity_0l2vyzk">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_094kfre_di" bpmnElement="Gateway_094kfre" isMarkerVisible="true">
        <dc:Bounds x="25" y="25" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0hbe7uh_di" bpmnElement="Activity_0hbe7uh">
        <dc:Bounds x="0" y="10" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0vvcchi_di" bpmnElement="Event_0vvcchi">
        <dc:Bounds x="32" y="32" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_09w17hm_di" bpmnElement="Flow_09w17hm">
        <di:waypoint x="198" y="115" />
        <di:waypoint x="150" y="115" />
        <di:waypoint x="150" y="50" />
        <di:waypoint x="100" y="50" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0inp8pw_di" bpmnElement="Flow_0inp8pw">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_07p5154_di" bpmnElement="Flow_07p5154">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ksfaw7_di" bpmnElement="Flow_0ksfaw7">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1yq5gf7_di" bpmnElement="Flow_1yq5gf7">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0md8hr9_di" bpmnElement="Flow_0md8hr9">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1c0f1gg_di" bpmnElement="Flow_1c0f1gg">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_149ewqv_di" bpmnElement="Flow_149ewqv">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0g2zy2a_di" bpmnElement="Flow_0g2zy2a">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_124lhtt_di" bpmnElement="Flow_124lhtt">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_04wsp8c_di" bpmnElement="Flow_04wsp8c">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="5" />
        <di:waypoint x="50" y="25" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1adgbzm_di" bpmnElement="Flow_1adgbzm">
        <di:waypoint x="50" y="25" />
        <di:waypoint x="50" y="0" />
        <di:waypoint x="70" y="0" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="50" y="10" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0roxnwe_di" bpmnElement="Flow_0roxnwe">
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="-10" />
        <di:waypoint x="70" y="-10" />
        <di:waypoint x="70" y="10" />
        <di:waypoint x="50" y="10" />
        <di:waypoint x="50" y="32" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
