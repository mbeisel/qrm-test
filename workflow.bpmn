<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn">
  <bpmn:process id="Process_1" isExecutable="false">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_1lqozqo</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:endEvent id="Event_0cj1ldc">
      <bpmn:incoming>Flow_0h6qi38</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:subProcess id="Activity_0rc5g7k" name="Select Hardware">
      <bpmn:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="circuitLanguage">openqasm</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_1lqozqo</bpmn:incoming>
      <bpmn:outgoing>Flow_0h6qi38</bpmn:outgoing>
      <bpmn:startEvent id="Event_0d8ecwt">
        <bpmn:outgoing>Flow_0tus7mp</bpmn:outgoing>
      </bpmn:startEvent>
      <bpmn:endEvent id="Event_1c2qxgm">
        <bpmn:incoming>Flow_0zbz5xz</bpmn:incoming>
      </bpmn:endEvent>
      <bpmn:sequenceFlow id="Flow_0tus7mp" sourceRef="Event_0d8ecwt" targetRef="QuantumCircuitExecutionTask_0ydzwfe" />
      <bpmn:sequenceFlow id="Flow_0zbz5xz" sourceRef="QuantumCircuitExecutionTask_0ydzwfe" targetRef="Event_1c2qxgm" />
      <bpmn:subProcess id="QuantumCircuitExecutionTask_0ydzwfe" name="Execute Circuit">
        <bpmn:incoming>Flow_0tus7mp</bpmn:incoming>
        <bpmn:outgoing>Flow_0zbz5xz</bpmn:outgoing>
        <bpmn:startEvent id="Event_0v91hu0">
          <bpmn:outgoing>Flow_0mtq48e</bpmn:outgoing>
        </bpmn:startEvent>
        <bpmn:scriptTask id="Activity_0mitgm7" name="Create deployment" scriptFormat="javascript">
          <bpmn:incoming>Flow_0mtq48e</bpmn:incoming>
          <bpmn:outgoing>Flow_0r5z7xv</bpmn:outgoing>
          <bpmn:script>
var params = {"opentoscaEndpoint":"http://localhost:1337/csars","deploymentModelUrl":"{{ wineryEndpoint }}/servicetemplates/http%253A%252F%252Fquantil.org%252Fquantme%252Fpush/QuokkaCircuitExecutionService_w1/?csar","subprocessId":"QuantumCircuitExecutionTask_0ydzwfe","camundaTopic":"wHYt8DOqoz1T","camundaEndpoint":"http://localhost:8080/engine-rest"}
params.csarName = "ondemand_" + (Math.random().toString().substring(3));


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}


var createCsarResponse = fetch('POST', params.opentoscaEndpoint, JSON.stringify({
    enrich: 'false',
    name: params.csarName,
    url: params.deploymentModelUrl
}))


var serviceTemplates = JSON.parse(fetch('GET', params.opentoscaEndpoint + "/" + params.csarName + ".csar/servicetemplates"))
var buildPlansUrl = serviceTemplates.service_templates[0]._links.self.href + '/buildplans'
var buildPlans = JSON.parse(fetch('GET', buildPlansUrl))
var buildPlanUrl = buildPlans.plans[0]._links.self.href
var inputParameters = JSON.parse(fetch('GET', buildPlanUrl)).input_parameters
for(var i = 0; i &lt; inputParameters.length; i++) {
    if(inputParameters[i].name === "camundaEndpoint") {
        inputParameters[i].value = params.opentoscaEndpoint
    } else if(inputParameters[i].name === "camundaTopic") {
        inputParameters[i].value = params.camundaTopic
    } else {
        inputParameters[i].value = "null"
    }
}
var createInstanceResponse = fetch('POST', buildPlanUrl + "/instances", JSON.stringify(inputParameters))
execution.setVariable(params.subprocessId + "_deploymentBuildPlanInstanceUrl", buildPlanUrl + "/instances/" + createInstanceResponse);</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_0mtq48e" sourceRef="Event_0v91hu0" targetRef="Activity_0mitgm7" />
        <bpmn:scriptTask id="Activity_0pylp6b" name="Wait for deployment" scriptFormat="javascript">
          <bpmn:incoming>Flow_0r5z7xv</bpmn:incoming>
          <bpmn:outgoing>Flow_1ibi824</bpmn:outgoing>
          <bpmn:script>
var params = {"subprocessId":"QuantumCircuitExecutionTask_0ydzwfe"};


function fetch(method, url, body) {
    try {
        var resourceURL = new java.net.URL(url);
    
        var urlConnection = resourceURL.openConnection();
        urlConnection.setRequestMethod(method);
        urlConnection.setRequestProperty("Accept", "application/json");
        if (body) {
            urlConnection.setDoOutput(true);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            var outputStream = urlConnection.getOutputStream()
            var outputStreamWriter = new java.io.OutputStreamWriter(outputStream)
            outputStreamWriter.write(body);
            outputStreamWriter.flush();
            outputStreamWriter.close();
            outputStream.close();
        }
    
        var inputStream = new java.io.InputStreamReader(urlConnection
            .getInputStream());
        var bufferedReader = new java.io.BufferedReader(inputStream);
        var inputLine = ""
        var text = "";
        var i = 5;
        while ((inputLine = bufferedReader.readLine()) != null) {
            text += inputLine
        }
        bufferedReader.close();
        java.lang.System.out.println("Response from " + url + ": " + text);
        return text;
    } catch (e) {
        java.lang.System.err.println(e);
        throw e;
    }
}
var buildPlanInstanceUrl = execution.getVariable(params.subprocessId + "_deploymentBuildPlanInstanceUrl");
var instanceUrl;
for(var i = 0; i &lt; 30; i++) {
    try {
        instanceUrl = JSON.parse(fetch('GET', buildPlanInstanceUrl))._links.service_template_instance.href; 
        if (instanceUrl) break;
     } catch (e) {
     }
     java.lang.Thread.sleep(2000);
}

java.lang.System.out.println("InstanceUrl: " + instanceUrl);

for(var i = 0; i &lt; 30 * 8; i++) {
    try {
        var createInstanceResponse = fetch('GET', instanceUrl);
        var instance = JSON.parse(createInstanceResponse).service_template_instances;
        if (instance &amp;&amp; instance.state === "CREATED") {
            break;
        }
     } catch (e) {
     }
     java.lang.Thread.sleep(2000);
}

var properties = JSON.parse(fetch('GET', instanceUrl + "/properties"));
 
execution.setVariable("selfserviceApplicationUrl", properties.selfserviceApplicationUrl);
java.lang.Thread.sleep(12000);
</bpmn:script>
        </bpmn:scriptTask>
        <bpmn:sequenceFlow id="Flow_0r5z7xv" sourceRef="Activity_0mitgm7" targetRef="Activity_0pylp6b" />
        <bpmn:serviceTask id="Activity_03j08tl" name="Call service">
          <bpmn:extensionElements>
            <camunda:connector>
              <camunda:inputOutput>
                <camunda:inputParameter name="method">POST</camunda:inputParameter>
                <camunda:inputParameter name="headers">
                  <camunda:map>
                    <camunda:entry key="Accept">application/json</camunda:entry>
                    <camunda:entry key="Content-Type">application/json</camunda:entry>
                  </camunda:map>
                </camunda:inputParameter>
                <camunda:inputParameter name="url">http://quokka-gateway:6474/quokka/circuit-execution/execution-service</camunda:inputParameter>
                <camunda:inputParameter name="payload">
                  <camunda:script scriptFormat="groovy">
import groovy.json.JsonBuilder
  def qpu = execution.getVariable("qpu");
  def circuit = execution.getVariable("circuit");
  def token = execution.getVariable("quantum_token_ibmq");
  def gammas = execution.getVariable("gammas");
  def betas = execution.getVariable("betas");
  def optimizedParameters = execution.getVariable("optimizedParameters");
  def credentials = [:];
  credentials.put("token", token);
  credentials.put("hub", "ibm-q");
  credentials.put("group", "open")
  credentials.put("project", "main");
  credentials.put("url", "https://auth.quantum-computing.ibm.com/api");
  def request = [:];
  request.put("qpu", qpu);
  request.put("credentials", credentials)
  request.put("shots", 2000);
  request.put("circuit", circuit);
  request.put("circuit_format", "openqasm");
  request.put("provider", "ibm");
  
  requeststring = new JsonBuilder(request).toPrettyString()
println(requeststring);
  return requeststring;</camunda:script>
                </camunda:inputParameter>
                <camunda:outputParameter name="counts">
                  <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp);
println(resp);
counts_array= [];
for (el in resp){
println(el);
   counts_array.push(el.get('counts'));
}
println(counts_array);
counts_array;</camunda:script>
                </camunda:outputParameter>
                <camunda:outputParameter name="measQubits">
                  <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp);
println(resp);
meas_qubits_array = [];
for (el in resp){
   meas_qubits_array.push(el.get('meas_qubits'));
}
println(meas_qubits_array);
return meas_qubits_array;</camunda:script>
                </camunda:outputParameter>
                <camunda:outputParameter name="circuitDepthTranspiled">
                  <camunda:script scriptFormat="groovy">def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurperClassic().parseText(resp)
println(resp);
transpiled_circuit_depth_array = [];
for (el in resp){
println(el);
   transpiled_circuit_depth_array.push(el.get('transpiled_circuit_depth'));
}
println(transpiled_circuit_depth_array);
return transpiled_circuit_depth_array;</camunda:script>
                </camunda:outputParameter>
              </camunda:inputOutput>
              <camunda:connectorId>http-connector</camunda:connectorId>
            </camunda:connector>
          </bpmn:extensionElements>
          <bpmn:incoming>Flow_1ibi824</bpmn:incoming>
          <bpmn:outgoing>Flow_0z8megs</bpmn:outgoing>
        </bpmn:serviceTask>
        <bpmn:sequenceFlow id="Flow_1ibi824" sourceRef="Activity_0pylp6b" targetRef="Activity_03j08tl" />
        <bpmn:endEvent id="Event_038o29x">
          <bpmn:incoming>Flow_0z8megs</bpmn:incoming>
        </bpmn:endEvent>
        <bpmn:sequenceFlow id="Flow_0z8megs" sourceRef="Activity_03j08tl" targetRef="Event_038o29x" />
      </bpmn:subProcess>
    </bpmn:subProcess>
    <bpmn:sequenceFlow id="Flow_1lqozqo" sourceRef="StartEvent_1" targetRef="Activity_0rc5g7k" />
    <bpmn:sequenceFlow id="Flow_0h6qi38" sourceRef="Activity_0rc5g7k" targetRef="Event_0cj1ldc" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="Event_13mqgr1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="173" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0cj1ldc_di" bpmnElement="Event_0cj1ldc">
        <dc:Bounds x="32" y="32" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rc5g7k_di" bpmnElement="Activity_0rc5g7k" isExpanded="true">
        <dc:Bounds x="460" y="-70" width="360" height="240" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1c2qxgm_di" bpmnElement="Event_1c2qxgm">
        <dc:Bounds x="762" y="22" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0d8ecwt_di" bpmnElement="Event_0d8ecwt">
        <dc:Bounds x="512" y="22" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="QuantumCircuitExecutionTask_0ydzwfe_di" bpmnElement="QuantumCircuitExecutionTask_0ydzwfe">
        <dc:Bounds x="580" y="70" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0tus7mp_di" bpmnElement="Flow_0tus7mp">
        <di:waypoint x="548" y="40" />
        <di:waypoint x="660" y="40" />
        <di:waypoint x="660" y="0" />
        <di:waypoint x="630" y="0" />
        <di:waypoint x="630" y="70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0zbz5xz_di" bpmnElement="Flow_0zbz5xz">
        <di:waypoint x="630" y="70" />
        <di:waypoint x="630" y="0" />
        <di:waypoint x="660" y="0" />
        <di:waypoint x="660" y="40" />
        <di:waypoint x="762" y="40" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1lqozqo_di" bpmnElement="Flow_1lqozqo">
        <di:waypoint x="209" y="120" />
        <di:waypoint x="460" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0h6qi38_di" bpmnElement="Flow_0h6qi38">
        <di:waypoint x="460" y="50" />
        <di:waypoint x="68" y="50" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
  <bpmndi:BPMNDiagram>
    <bpmndi:BPMNPlane bpmnElement="QuantumCircuitExecutionTask_0ydzwfe" />
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
